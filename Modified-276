using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;
using Domain.X12;
using Domain.X12.Fields;
using Domain.X12.Loops;
using Domain.X12.Parsers;
using Domain.X12.Segments;
using Newtonsoft.Json.Linq;

namespace RelayHealth.Realtime.Batch.Parser.Converter
{
    public class CSVToX12276
    {
        public void CSVToX12276Main()
        {
            X12Parser x12Parser = new X12Parser();
            X12Message x12Message;
            GS gsSegment;
            ISA isaSegment;
            IEA ieaSegment;
            GE geSegment;
            InterchangeControlLoop interchangeLoop;

            var timer = new Stopwatch();
            timer.Start();

            // ---------- CONFIG ----------
            string csv276File = "C:\\Users\\slikhith\\CsvToX12\\Portal_87726_test_csi.csv";
            string outputDir  = "C:\\Users\\slikhith\\Documents\\creates-276.";
            Directory.CreateDirectory(outputDir);

            string defaultHeader =
                "TxnType,ClaimNumber,MemberID,LN,FN,DOB,Gender,ProviderID,ProviderLN,ProviderFN,PayerID,PayerName,ClaimDateFrom,ClaimDateTo,TraceNumber,TotalSubmittedCharges,FacilityType,ClaimStatus,Group,ProcCodeQualifier,ProcCodes,ProcCodeModifier,LineItemChargeAmount,ProcUnits,ServiceLineNumber,ProcDates,PAN,ServiceProvider1LN,ServiceProvider1FN,ServiceProvider1IDType,ServiceProvider1ID";

            // ---------- BASE TEMPLATE (subscriber HL only) ----------
            string claimStatusBase =
                "ISA*00*          *00*          *ZZ*770545613      *ZZ*00060          *060207*1056*^*00501*000000001*0*P*:~" +
                "GS*HR*770545613*00060*20110401*105608*4056*X*005010X212~" +
                "ST*276*0001*005010X212~" +
                "BHT*0010*13**20110401~" +
                "HL*1**20*1~" +
                "NM1*PR*2******PI~" +
                "HL*2*1*21*1~" +
                "NM1*41*1******46~" +
                "HL*3*2*19*1~" +
                "NM1*1P*1******FI~" +
                "HL*4*3*22*0~" +      // Subscriber HL (no dependent)
                "NM1*IL*1******24~" + // Stub subscriber NM1; we’ll fill
                "SE*11*0001~" +
                "GE*1*1~" +
                "IEA*1*000000001~";

            // ---------- READ CSV ----------
            string jsonOutput = ParseCSVToJson(csv276File, defaultHeader);
            JArray csvJson = JArray.Parse(jsonOutput);

            string outFile = Path.Combine(outputDir, $"created-276_{DateTime.Now:HHmmssFFF}.txt");

            foreach (JObject record in csvJson)
            {
                var x12Data = x12Parser.ParseString(claimStatusBase);
                var interChanges = x12Data.Interchanges;
                x12Message = new X12Message();

                // Standardized date/time formats
                string isaDateYYMMDD = DateTime.Now.ToString("yyMMdd");    // ISA09
                string dateYYYYMMDD  = DateTime.Now.ToString("yyyyMMdd");  // GS04, BHT04, DMG, DTP
                string isaTimeHHmm   = DateTime.Now.ToString("HHmm");      // ISA10
                string timeHHmmss    = DateTime.Now.ToString("HHmmss");    // GS05, BHT05

                string isaControlNumber = GetControlNumber();
                string gsControlNumber  = GetControlNumber();

                foreach (var interChange in interChanges)
                {
                    interchangeLoop = new InterchangeControlLoop();
                    isaSegment = interChange.ISA;
                    ieaSegment = interChange.IEA;

                    foreach (var group in interChange.Groups)
                    {
                        gsSegment = group.GS;
                        geSegment = group.GE;

                        foreach (var transactionset in group.TransactionSets)
                        {
                            var bhtSegment = transactionset.Segments.OfType<BHT>().FirstOrDefault();

                            // --- ISA/GS/GE/IEA ---
                            isaSegment.InterchangeDate.ParsedValue      = isaDateYYMMDD;
                            isaSegment.InterchangeTime.ParsedValue      = isaTimeHHmm;
                            isaSegment.InterchangeControlNumber         = isaControlNumber;
                            ieaSegment.InterchangeControlNumber         = isaControlNumber;

                            gsSegment.CreateDate.ParsedValue            = dateYYYYMMDD;
                            gsSegment.CreateTime.ParsedValue            = timeHHmmss;
                            gsSegment.GroupControlNumber                = int.Parse(gsControlNumber);
                            geSegment.GroupControlNumber                = int.Parse(gsControlNumber);

                            if (bhtSegment != null)
                            {
                                // If PAN provided, use as OriginatorIdentifier like your earlier request
                                var panForBht = GetCSVValue(record, "PAN");
                                bhtSegment.OriginatorIdentifier = string.IsNullOrEmpty(panForBht) ? isaControlNumber : panForBht;
                                bhtSegment.CreateDate.ParsedValue = dateYYYYMMDD;
                                bhtSegment.CreateTime.ParsedValue = timeHHmmss;
                            }

                            // --- 2000A/2100A: Payer ---
                            var loop2000A   = transactionset.Segments.OfType<Loop>().FirstOrDefault(l => l.SegmentId == "2000A");
                            var loop2100A   = loop2000A?.Segments.OfType<Loop>().FirstOrDefault(l => l.SegmentId == "2100A");
                            var payerNM1    = loop2100A?.Segments.OfType<NM1>().FirstOrDefault();
                            if (payerNM1 != null)
                            {
                                payerNM1.EntityId    = "PR";
                                payerNM1.EntityType  = "2";
                                payerNM1.Last        = GetCSVValue(record, "PayerName");  // REQUIRED NM103
                                payerNM1.IdQualifier = "PI";
                                payerNM1.IdCode      = GetCSVValue(record, "PayerID");
                            }

                            // --- 2000B/2100B: Information Receiver ---
                            var loop2000B   = transactionset.Segments.OfType<Loop>().FirstOrDefault(l => l.SegmentId == "2000B");
                            var loop2100B   = loop2000B?.Segments.OfType<Loop>().FirstOrDefault(l => l.SegmentId == "2100B");
                            var infoNM1     = loop2100B?.Segments.OfType<NM1>().FirstOrDefault();
                            if (infoNM1 != null)
                            {
                                var provLN = GetCSVValue(record, "ProviderLN");
                                var provFN = GetCSVValue(record, "ProviderFN");

                                infoNM1.EntityId    = "41";
                                infoNM1.EntityType  = string.IsNullOrEmpty(provFN) ? "2" : "1"; // org if no FN
                                infoNM1.Last        = provLN;
                                infoNM1.First       = provFN;
                                infoNM1.IdQualifier = "46";
                                infoNM1.IdCode      = GetCSVValue(record, "ProviderID");
                            }

                            // --- 2000C/2100C: Service Provider (optional – kept as in your code) ---
                            var loop2000c = transactionset.Segments.OfType<Loop>().FirstOrDefault(l => l.SegmentId == "2000C");
                            var loop2100c = loop2000c?.Segments.OfType<Loop>().FirstOrDefault(l => l.SegmentId == "2100C");
                            var NM12100c  = loop2100c?.Segments.OfType<NM1>().FirstOrDefault();
                            if (NM12100c != null)
                            {
                                NM12100c.Last = GetCSVValue(record, "ServiceProvider1LN");
                                NM12100c.First = GetCSVValue(record, "ServiceProvider1FN");

                                var provIDType = GetCSVValue(record, "ServiceProvider1IDType");
                                var provID     = GetCSVValue(record, "ServiceProvider1ID");
                                NM12100c.IdQualifier = "XX"; // default
                                if (!string.IsNullOrEmpty(provIDType) && !string.IsNullOrEmpty(provID))
                                {
                                    if (provIDType == "T") NM12100c.IdQualifier = "FI";
                                    if (provIDType == "P") NM12100c.IdQualifier = "SV";
                                    NM12100c.IdCode = provID;
                                }
                            }

                            // --- 2000D (Subscriber HL) ---
                            var loop2000D = transactionset.Segments.OfType<Loop>().FirstOrDefault(l => l.SegmentId == "2000D")
                                         ?? transactionset.Segments.OfType<Loop>().FirstOrDefault(l => l.SegmentId == "2000C"); // fallback

                            // --- 2100D (Subscriber Name loop) ---
                            var loop2100D = loop2000D?.Segments.OfType<Loop>().FirstOrDefault(l => l.SegmentId == "2100D");
                            var subNM1    = loop2100D?.Segments.OfType<NM1>().FirstOrDefault(); // template stub NM1*IL is here

                            if (subNM1 != null)
                            {
                                subNM1.EntityId    = "IL";
                                subNM1.EntityType  = "1"; // person
                                subNM1.Last        = GetCSVValue(record, "LN");
                                subNM1.First       = GetCSVValue(record, "FN");
                                subNM1.IdQualifier = "MI";
                                subNM1.IdCode      = GetCSVValue(record, "MemberID");
                            }

                            // DMG must be inside 2100D and AFTER NM1
                            var dobYYYYMMDD = NormalizeToYYYYMMDD(GetCSVValue(record, "DOB"));
                            if (!string.IsNullOrEmpty(dobYYYYMMDD) && loop2100D != null)
                            {
                                var dmg = new DMG
                                {
                                    DateOfBirth =
                                    {
                                        FormatQualifier = "D8",
                                        ParsedValue     = dobYYYYMMDD
                                    },
                                    GenderCode = GetCSVValue(record, "Gender")
                                };
                                loop2100D.AddSegment(dmg);
                            }

                            // --- 2200D (Claim Status Tracking) ---
                            // Domain.X12 templates often include 2200D; if not, create a weak loop so we can add segments there
                            var loop2200D = loop2000D?.Segments.OfType<Loop>().FirstOrDefault(l => l.SegmentId == "2200D");
                            if (loop2200D == null && loop2000D != null)
                            {
                                var weak2200D = new WeakTypeLoop("2200D", "Subscriber Claim Tracking");
                                loop2000D.AddSegment(weak2200D);
                                loop2200D = weak2200D;
                            }

                            if (loop2200D != null)
                            {
                                // TRN – as per your expected, leave TRN02 blank
                                var trn = new TRN { TraceTypeCode = "1", TraceNumber = "" };
                                loop2200D.AddSegment(trn);

                                // REF segments
                                var pan = GetCSVValue(record, "PAN");
                                if (!string.IsNullOrEmpty(pan))
                                    AddRefSegment(loop2200D, "EJ", pan);

                                AddRefSegment(loop2200D, "1K", GetCSVValue(record, "ClaimNumber"));

                                var ft = GetCSVValue(record, "FacilityType");
                                var cs = GetCSVValue(record, "ClaimStatus");
                                if (!string.IsNullOrEmpty(ft) && !string.IsNullOrEmpty(cs))
                                    AddRefSegment(loop2200D, "BLT", ft + cs);
                                AddRefSegment(loop2200D, "LU", ft);
                                AddRefSegment(loop2200D, "6P", GetCSVValue(record, "Group"));

                                // AMT*T3 (with amount)
                                var amtVal = GetCSVValue(record, "TotalSubmittedCharges");
                                if (!string.IsNullOrEmpty(amtVal))
                                {
                                    var amt = new AMT
                                    {
                                        AmountQualifierCode = "T3"
                                    };
                                    amt.MonetaryAmount.ParsedValue = amtVal;
                                    loop2200D.AddSegment(amt);
                                }

                                // DTP 472 (Claim Service Date) — REQUIRED if 2210D not used
                                var from = NormalizeToYYYYMMDD(GetCSVValue(record, "ClaimDateFrom"));
                                var to   = NormalizeToYYYYMMDD(GetCSVValue(record, "ClaimDateTo"));
                                if (!string.IsNullOrEmpty(from))
                                {
                                    var dtp = new DTP { Qualifier = "472" };
                                    if (!string.IsNullOrEmpty(to))
                                    {
                                        dtp.Date.FormatQualifier = "RD8";
                                        dtp.Date.ParsedValue     = $"{from}-{to}";
                                    }
                                    else
                                    {
                                        dtp.Date.FormatQualifier = "D8";
                                        dtp.Date.ParsedValue     = from;
                                    }
                                    loop2200D.AddSegment(dtp);
                                }
                            }

                            // --- WRITE FILE ---
                            string x12String =
                                isaSegment.ToString() +
                                gsSegment.ToString() +
                                transactionset.ToString() +
                                geSegment.ToString() +
                                ieaSegment.ToString() + "\r\n";

                            File.AppendAllText(outFile, x12String, Encoding.UTF8);
                        }
                    }
                }
            }

            timer.Stop();
            Console.WriteLine("276 X12 generation completed in " + timer.ElapsedMilliseconds + " ms");
            Console.WriteLine("Output File: " + outFile);
        }

        // ---------- HELPERS ----------
        private static void AddRefSegment(Loop loop, string qualifier, string value)
        {
            if (!string.IsNullOrEmpty(value))
            {
                var refSeg = new REF { IdQualifier = qualifier, IdCode = value };
                loop.AddSegment(refSeg);
            }
        }

        private static string GetCSVValue(JObject json, string field) => json[field]?.ToString() ?? "";

        private static string NormalizeToYYYYMMDD(string raw)
        {
            if (string.IsNullOrWhiteSpace(raw)) return "";
            // Remove non-digits
            var digits = new string(raw.Where(char.IsDigit).ToArray());
            DateTime dt;

            // Try common explicit formats (with and without separators)
            var formats = new[] { "yyyyMMdd", "MMddyyyy", "M/d/yyyy", "MM/dd/yyyy", "yyyy-MM-dd" };
            foreach (var fmt in formats)
            {
                if (DateTime.TryParseExact(raw, fmt, null, System.Globalization.DateTimeStyles.None, out dt))
                    return dt.ToString("yyyyMMdd");
            }

            // Try pure digits
            if (digits.Length == 8)
            {
                if (DateTime.TryParseExact(digits, "MMddyyyy", null, System.Globalization.DateTimeStyles.None, out dt))
                    return dt.ToString("yyyyMMdd");
                if (DateTime.TryParseExact(digits, "yyyyMMdd", null, System.Globalization.DateTimeStyles.None, out dt))
                    return dt.ToString("yyyyMMdd");
            }

            // Last resort
            return DateTime.TryParse(raw, out dt) ? dt.ToString("yyyyMMdd") : "";
        }

        private static string GetControlNumber()
        {
            var rnd = new Random();
            return rnd.Next(100000000, 999999999).ToString();
        }

        public static string ParseCSVToJson(string filePath, string defaultHeader)
        {
            var lines = File.ReadAllLines(filePath);
            if (lines.Length == 0) return "[]";

            string[] headers;
            int startLine;

            if (lines[0].IndexOf("TxnType", StringComparison.OrdinalIgnoreCase) != -1)
            {
                headers   = lines[0].Split(',');
                startLine = 1;
            }
            else
            {
                headers   = defaultHeader.Split(',');
                startLine = 0;
            }

            var records = new List<Dictionary<string, string>>();
            for (int i = startLine; i < lines.Length; i++)
            {
                var values = lines[i].Split(',');
                var rec = new Dictionary<string, string>();
                for (int j = 0; j < headers.Length && j < values.Length; j++)
                    rec[headers[j]] = values[j];
                records.Add(rec);
            }
            return Newtonsoft.Json.JsonConvert.SerializeObject(records, Newtonsoft.Json.Formatting.Indented);
        }
    }
}
