using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.Json;
using Domain.X12;
using Domain.X12.Fields;
using Domain.X12.Loops;
using Domain.X12.Parsers;
using Domain.X12.Segments;

namespace CSVRealtimeParser
{
    class Claim276CSVParser
    {
        static async Task Main(string[] args)
        {
            X12Parser x12Parser = new X12Parser();
            Stopwatch timer = new Stopwatch();
            timer.Start();

            // ---------- CONFIGURATION ----------
            string csv276File = "C:\\Input\\claims.csv";
            string defaultHeader =
                "TxnType,PayerID,PayerName,ProviderID,ProviderLN,ProviderFN,ProviderNPI," +
                "PatientLN,PatientFN,PatientDOB,PatientGender,MemberID,ClaimNumber,ClaimAmount," +
                "ClaimDateFrom,ClaimDateTo,ServiceCode,FacilityType,TraceNumber,TotalCharges";

            // ---------- READ CSV AND CONVERT TO JSON ----------
            string jsonOutput = ParseCSVToJson(csv276File, defaultHeader);
            using JsonDocument csvJson = JsonDocument.Parse(jsonOutput);

            string timestamp = DateTime.Now.ToString("HHmmssFFF");
            string outFile = $"C:\\Output\\created-276.{timestamp}.txt";

            string base276Template =
                "ISA*00*          00          ZZ*SENDERID       *ZZ*RECEIVERID     *250101*1200^00501*000000001*0*P:~" +
                "GS*HR*SENDERID*RECEIVERID*20250101*1200*1*X*005010X212~" +
                "ST*276*0001*005010X212~" +
                "BHT*0010*13*12345*20250101*1200~" +
                "HL*1**20*1~" +
                "NM1*PR*2*PAYERNAME***PI*PAYERID~" +
                "HL*2*1*21*1~" +
                "NM1*41*2*PROVIDERNAME***46*PROVIDERID~" +
                "HL*3*2*19*0~" +
                "NM1*QC*1*PATIENTLAST*PATIENTFIRST****MI*MEMBERID~" +
                "TRN*1*TRACE123456*9CHGHEALTH~" +
                "REF*1K*CLAIM12345~" +
                "DTP*472*RD8*20250101-20250115~" +
                "SE*12*0001~" +
                "GE*1*1~" +
                "IEA*1*000000001~";

            // ---------- PROCESS EACH RECORD ----------
            if (csvJson.RootElement.ValueKind == JsonValueKind.Array)
            {
                foreach (JsonElement record in csvJson.RootElement.EnumerateArray())
                {
                    var x12Data = x12Parser.ParseString(base276Template);
                    string today_YYYYMMDD = DateTime.Now.ToString("yyyyMMdd");
                    string currentTime = DateTime.Now.ToString("HHmm");
                    string isaCtrlNum = GetControlNumber();
                    string gsCtrlNum = GetControlNumber();

                    foreach (var inter in x12Data.Interchanges)
                    {
                        ISA isa = inter.ISA;
                        IEA iea = inter.IEA;
                        isa.InterchangeDate.ParsedValue = today_YYYYMMDD;
                        isa.InterchangeTime.ParsedValue = currentTime;
                        isa.InterchangeControlNumber = isaCtrlNum;
                        iea.InterchangeControlNumber = isaCtrlNum;

                        foreach (var group in inter.Groups)
                        {
                            GS gs = group.GS;
                            GE ge = group.GE;
                            gs.CreateDate.ParsedValue = today_YYYYMMDD;
                            gs.CreateTime.ParsedValue = currentTime;
                            gs.GroupControlNumber = int.Parse(gsCtrlNum);
                            ge.GroupControlNumber = int.Parse(gsCtrlNum);

                            foreach (var transaction in group.TransactionSets)
                            {
                                BHT bht = transaction.Segments.OfType<BHT>().FirstOrDefault();
                                if (bht != null)
                                {
                                    bht.ReferenceId = GetCSVValue(record, "ClaimNumber");
                                    bht.CreateDate.ParsedValue = today_YYYYMMDD;
                                    bht.CreateTime.ParsedValue = currentTime;
                                }

                                // ---------------- PAYER (2100A) ----------------
                                var payerLoop = transaction.Segments.OfType<Loop>().FirstOrDefault(l => l.SegmentId == "2000A");
                                var payerNameLoop = payerLoop?.Segments.OfType<Loop>().FirstOrDefault(l => l.SegmentId == "2100A");
                                var payerNM1 = payerNameLoop?.Segments.OfType<NM1>().FirstOrDefault();
                                if (payerNM1 != null)
                                {
                                    payerNM1.Last = GetCSVValue(record, "PayerName");
                                    payerNM1.IdCode = GetCSVValue(record, "PayerID");
                                }

                                // ---------------- PROVIDER (2100B) ----------------
                                var providerLoop = payerLoop?.Segments.OfType<Loop>().FirstOrDefault(l => l.SegmentId == "2000B");
                                var providerNameLoop = providerLoop?.Segments.OfType<Loop>().FirstOrDefault(l => l.SegmentId == "2100B");
                                var providerNM1 = providerNameLoop?.Segments.OfType<NM1>().FirstOrDefault();
                                if (providerNM1 != null)
                                {
                                    providerNM1.Last = GetCSVValue(record, "ProviderLN");
                                    providerNM1.First = GetCSVValue(record, "ProviderFN");
                                    providerNM1.IdQualifier = "XX"; // NPI
                                    providerNM1.IdCode = GetCSVValue(record, "ProviderNPI");
                                }

                                // ---------------- PATIENT (2100C) ----------------
                                var patientLoop = providerLoop?.Segments.OfType<Loop>().FirstOrDefault(l => l.SegmentId == "2000C");
                                var patientNameLoop = patientLoop?.Segments.OfType<Loop>().FirstOrDefault(l => l.SegmentId == "2100C");
                                var patientNM1 = patientNameLoop?.Segments.OfType<NM1>().FirstOrDefault();
                                if (patientNM1 != null)
                                {
                                    patientNM1.Last = GetCSVValue(record, "PatientLN");
                                    patientNM1.First = GetCSVValue(record, "PatientFN");
                                    patientNM1.IdQualifier = "MI";
                                    patientNM1.IdCode = GetCSVValue(record, "MemberID");
                                }

                                // ---------------- CLAIM LOOP (2200D) ----------------
                                var claimLoop = patientLoop?.Segments.OfType<Loop>().FirstOrDefault(l => l.SegmentId == "2200D");
                                if (claimLoop != null)
                                {
                                    // TRN Segment
                                    var trn = claimLoop.Segments.OfType<TRN>().FirstOrDefault();
                                    if (trn != null)
                                    {
                                        trn.TraceTypeCode = "1";
                                        trn.TraceNumber = GetCSVValue(record, "TraceNumber");
                                    }

                                    // REF Segment - Claim Number
                                    claimLoop.AddSegment(new REF
                                    {
                                        IdQualifier = "1K",
                                        IdCode = GetCSVValue(record, "ClaimNumber")
                                    });

                                    // DTP Segment - Claim Dates
                                    if (!string.IsNullOrEmpty(GetCSVValue(record, "ClaimDateFrom")))
                                    {
                                        claimLoop.AddSegment(new DTP
                                        {
                                            Qualifier = "472",
                                            Date = { FormatQualifier = "RD8", ParsedValue =
                                                ConvertDateRange(
                                                    GetCSVValue(record, "ClaimDateFrom"),
                                                    GetCSVValue(record, "ClaimDateTo"))
                                            }
                                        });
                                    }

                                    // SVC Segment - Service details (optional)
                                    if (!string.IsNullOrEmpty(GetCSVValue(record, "ServiceCode")))
                                    {
                                        claimLoop.AddSegment(new SVC
                                        {
                                            ProcedureCode = "HC:" + GetCSVValue(record, "ServiceCode"),
                                            ChargeAmount = GetCSVValue(record, "ClaimAmount")
                                        });
                                    }

                                    // AMT Segment - Total Claim Charges
                                    if (!string.IsNullOrEmpty(GetCSVValue(record, "TotalCharges")))
                                    {
                                        claimLoop.AddSegment(new AMT
                                        {
                                            Qualifier = "T3",
                                            Amount = GetCSVValue(record, "TotalCharges")
                                        });
                                    }
                                }

                                // ---------------- BUILD COMPLETE X12 STRING ----------------
                                string x12String =
                                    inter.ISA.ToString() +
                                    group.GS.ToString() +
                                    transaction.ToString() +
                                    group.GE.ToString() +
                                    inter.IEA.ToString() + "\r\n";

                                await File.AppendAllTextAsync(outFile, x12String, Encoding.UTF8);
                            }
                        }
                    }
                }
            }

            timer.Stop();
            Console.WriteLine($"✅ 276 Claim Inquiry generation completed in {timer.ElapsedMilliseconds} ms");
        }

        // ---------- HELPER FUNCTIONS ----------
        private static string GetControlNumber()
        {
            var random = new Random();
            return random.Next(100000000, 999999999).ToString();
        }

        private static string GetCSVValue(JsonElement jsonElement, string field)
        {
            try
            {
                return jsonElement.GetProperty(field).GetString() ?? "";
            }
            catch
            {
                return "";
            }
        }

        private static string ConvertDateRange(string fromDate, string toDate)
        {
            if (DateTime.TryParse(fromDate, out var fromDt) && DateTime.TryParse(toDate, out var toDt))
                return $"{fromDt:yyyyMMdd}-{toDt:yyyyMMdd}";
            return "";
        }

        private static string ParseCSVToJson(string filePath, string defaultHeader)
        {
            var lines = File.ReadAllLines(filePath);
            if (lines.Length == 0) return "[]";

            string[] headers;
            int startLine = 1;

            if (!lines[0].Contains("TxnType", StringComparison.OrdinalIgnoreCase))
            {
                headers = defaultHeader.Split(',');
                startLine = 0;
            }
            else headers = lines[0].Split(',');

            var records = new List<Dictionary<string, string>>();
            for (int i = startLine; i < lines.Length; i++)
            {
                var values = lines[i].Split(',');
                var rec = new Dictionary<string, string>();
                for (int j = 0; j < headers.Length && j < values.Length; j++)
                    rec[headers[j]] = values[j];
                records.Add(rec);
            }
            return JsonSerializer.Serialize(records, new JsonSerializerOptions { WriteIndented = true });
        }
    }
}
