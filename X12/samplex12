my x12
ISA*00*          *00*          *ZZ*770545613      *ZZ*00060          *251010*0159*^*00501*263934810*0*P*:
GS*HR*770545613*00060*20251010*0159*263934810*X*005010X212
ST*276*0001*005010X212
BHT*0010*13*PAN1234*20251010*01594900
HL*1**20*1
NM1*PR*2*UNITED HEALTHCARE COMMERCIAL*****PI*87726
HL*2*1*21*1
NM1*41*1*DUVAL COUNTY HEALTH DEPARTMENT*****46*272890908
HL*3*2*19*1
NM1*1P*1* HEALTH DEPARTMENT*****XX*1649589466
HL*4*3*22*0
NM1*IL*1*JohnA*LostB****MI*A91962246
DMG*D8*20250530*M
SE*12*0001
GE*1*263934810
IEA*1*263934810


======================
ISA*00*          *01*JQ5V7TJQR *ZZ*TPG00061080    *ZZ*MEDIFAX EDI    *251008*0800*^*00501*605088663*0*P*:~
GS*HR*LCX1210000*133052274*20251008*08000100*100513716*X*005010X212~
ST*276*0001*005010X212~
BHT*0010*13*605088663*20251008*0800~
HL*1**20*1~
NM1*PR*2*UNITED HEALTHCARE COMMERCIAL*****PI*UHC~
HL*2*1*21*1~
NM1*41*2*DUVAL COUNTY HEALTH DEPARTMENT*****46*1528034170~
HL*3*2*19*1~
NM1*1P*2*DUVAL COUNTY HEALTH DEPARTMENT*****XX*1528034170~
HL*4*3*22*0~
DMG*D8*20240529*M~
NM1*IL*1*CLARK*NINA*MUSA MUZZAMMIL***MI*401076927~
TRN*1*16-2060B348-197B-458A-8489-5936D037C99A~
REF*EJ*16-1000144460~
AMT*T3*82.66~
DTP*472*D8*20250912~
SE*16*0001~
GE*1*100513716~
IEA*1*605088663~

// --- SUBSCRIBER LOOP (2000D) ---
var loop2000D = transactionset.Segments.OfType<Loop>().FirstOrDefault(l => l.SegmentId == "2000D");
var loop2100D = loop2000D?.Segments.OfType<Loop>().FirstOrDefault(l => l.SegmentId == "2100D");

if (loop2000D != null)
{
    // =====================
    // 2100D - NM1 (Subscriber)
    // =====================
    if (loop2100D != null)
    {
        var nm1 = loop2100D.Segments.OfType<NM1>().FirstOrDefault();
        if (nm1 != null)
        {
            nm1.EntityId = "IL";

            if (!string.IsNullOrEmpty(GetCSVValue(record, "LN")))
                nm1.Last = GetCSVValue(record, "LN");

            if (!string.IsNullOrEmpty(GetCSVValue(record, "FN")))
                nm1.First = GetCSVValue(record, "FN");

            if (!string.IsNullOrEmpty(GetCSVValue(record, "MI")))
                nm1.Middle = GetCSVValue(record, "MI");

            if (!string.IsNullOrEmpty(GetCSVValue(record, "Suffix")))
                nm1.Suffix = GetCSVValue(record, "Suffix");

            if (!string.IsNullOrEmpty(GetCSVValue(record, "MemberID")))
            {
                nm1.IdQualifier = "MI";
                nm1.IdCode = GetCSVValue(record, "MemberID");
            }
        }
    }

    // =====================
    // DMG - Subscriber DOB and Gender (under 2000D, right after HL)
    // =====================
    var dob = GetCSVValue(record, "DOB");
    var formattedDOB = NormalizeToYYYYMMDD(dob);

    if (!string.IsNullOrEmpty(formattedDOB))
    {
        var dmg = new DMG();
        dmg.DateOfBirth.FormatQualifier = "D8";
        dmg.DateOfBirth.ParsedValue = formattedDOB;

        var gender = GetCSVValue(record, "Gender");
        if (!string.IsNullOrEmpty(gender))
            dmg.GenderCode = gender;

        loop2000D.AddSegment(dmg);
    }

    // =====================
    // 2200D - Claim Status Loop
    // =====================
    var loop2200D = loop2000D.Segments.OfType<Loop>().FirstOrDefault(l => l.SegmentId == "2200D");
    if (loop2200D == null)
        loop2200D = loop2000D; // fallback

    // TRN - Claim Tracking Number (Patient Account Number)
    var pan = GetCSVValue(record, "PAN");
    if (!string.IsNullOrEmpty(pan))
    {
        var trn = new TRN
        {
            TraceTypeCode = "1",
            TraceNumber = pan
        };
        loop2200D.AddSegment(trn);
    }

    // REF*1K - Request Number
    var reqNumber = GetCSVValue(record, "RequestNumber");
    if (!string.IsNullOrEmpty(reqNumber))
        AddRefSegment(loop2200D, "1K", reqNumber);

    // REF*BLT - FacilityType + ClaimStatus
    var facilityType = GetCSVValue(record, "FacilityType");
    var claimStatus = GetCSVValue(record, "ClaimStatus");
    if (!string.IsNullOrEmpty(facilityType) && !string.IsNullOrEmpty(claimStatus))
        AddRefSegment(loop2200D, "BLT", facilityType + claimStatus);

    // REF*LU - Facility Type
    if (!string.IsNullOrEmpty(facilityType))
        AddRefSegment(loop2200D, "LU", facilityType);

    // REF*6P - Group Number
    var group = GetCSVValue(record, "Group");
    if (!string.IsNullOrEmpty(group))
        AddRefSegment(loop2200D, "6P", group);

    // REF*EJ - Payer Claim Control Number (using PAN)
    if (!string.IsNullOrEmpty(pan))
        AddRefSegment(loop2200D, "EJ", pan);

    // AMT*T3 - Total Submitted Charges
    var totalCharges = GetCSVValue(record, "TotalSubmittedCharges");
    if (!string.IsNullOrEmpty(totalCharges))
    {
        var amt = new AMT { AmountQualifierCode = "T3" };
        amt.MonetaryAmount.ParsedValue = totalCharges;
        loop2200D.AddSegment(amt);
    }

    // DTP*472 - Claim Service Date (From/To)
    var startDate = NormalizeToYYYYMMDD(GetCSVValue(record, "StartDate"));
    var endDate = NormalizeToYYYYMMDD(GetCSVValue(record, "EndDate"));

    if (!string.IsNullOrEmpty(startDate) && !string.IsNullOrEmpty(endDate))
    {
        var dtp = new DTP
        {
            Qualifier = "472"
        };
        dtp.Date.FormatQualifier = "RD8";
        dtp.Date.ParsedValue = $"{startDate}-{endDate}";
        loop2200D.AddSegment(dtp);
    }
    else if (!string.IsNullOrEmpty(startDate))
    {
        var dtp = new DTP
        {
            Qualifier = "472"
        };
        dtp.Date.FormatQualifier = "D8";
        dtp.Date.ParsedValue = startDate;
        loop2200D.AddSegment(dtp);
    }

    // =====================
    // 2210D - Service Line Information
    // =====================
    var loop2210D = loop2200D.Segments.OfType<Loop>().FirstOrDefault(l => l.SegmentId == "2210D");
    if (loop2210D == null)
        loop2210D = loop2200D; // fallback

    // SVC segment
    if (!string.IsNullOrEmpty(GetCSVValue(record, "ProcCodes")))
    {
        var svc = new SVC();
        svc.Procedure = new ProcedureIdentifier
        {
            Qualifier = GetCSVValue(record, "ProcCodeQualifier"),
            Code = GetCSVValue(record, "ProcCodes")
        };

        var modifier = GetCSVValue(record, "ProcCodeModifier");
        if (!string.IsNullOrEmpty(modifier))
            svc.Procedure.Modifier = modifier;

        var lineCharge = GetCSVValue(record, "LineItemChargeAmount");
        if (!string.IsNullOrEmpty(lineCharge))
            svc.ChargeAmount.ParsedValue = lineCharge;

        var units = GetCSVValue(record, "ProcUnits");
        if (!string.IsNullOrEmpty(units))
            svc.UnitsOfServicePaidCount.ParsedValue = units;

        loop2210D.AddSegment(svc);
    }

    // REF*FJ - Service Line Number
    var svcLineNo = GetCSVValue(record, "ServiceLineNumber");
    if (!string.IsNullOrEmpty(svcLineNo))
        AddRefSegment(loop2210D, "FJ", svcLineNo);

    // DTP*472 - Procedure Date
    var procDate = NormalizeToYYYYMMDD(GetCSVValue(record, "ProcDates"));
    if (!string.IsNullOrEmpty(procDate))
    {
        var procDtp = new DTP
        {
            Qualifier = "472"
        };
        procDtp.Date.FormatQualifier = "D8";
        procDtp.Date.ParsedValue = procDate;
        loop2210D.AddSegment(procDtp);
    }
}
