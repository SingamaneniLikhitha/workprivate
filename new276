using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Threading.Tasks;
using Domain.X12;
using Domain.X12.Fields;
using Domain.X12.Loops;
using Domain.X12.Parsers;
using Domain.X12.Segments;

namespace CSVRealtimeParser276
{
    class Claim276CSVParser
    {
        static async Task Main(string[] args)
        {
            // --- CONFIG ---
            string csv276File = "C:\\Users\\slikhith\\CsvToX12\\Portal_87726_test_csi.csv";
            string outputDir = "C:\\Users\\slikhith\\Documents\\creates-276";
            Directory.CreateDirectory(outputDir);

            string defaultHeader =
                "TxnType,ClaimNumber,MemberID,LN,FN,DOB,Gender,ProviderID,ProviderLN,ProviderFN,PayerID,PayerName,ClaimDateFrom,ClaimDateTo,TraceNumber,TotalSubmittedCharges,FacilityType,ClaimStatus,RelCode";

            string base276 = GetBase276Template();
            string jsonOutput = ParseCSVToJson(csv276File, defaultHeader);
            using JsonDocument csvJson = JsonDocument.Parse(jsonOutput);

            string outFile = Path.Combine(outputDir, $"created-276_{DateTime.Now:HHmmssFFF}.txt");

            Stopwatch timer = Stopwatch.StartNew();
            X12Parser parser = new X12Parser();

            foreach (JsonElement record in csvJson.RootElement.EnumerateArray())
            {
                var x12 = parser.ParseString(base276);
                foreach (var inter in x12.Interchanges)
                {
                    ISA isa = inter.ISA;
                    IEA iea = inter.IEA;

                    foreach (var group in inter.Groups)
                    {
                        GS gs = group.GS;
                        GE ge = group.GE;

                        foreach (var txn in group.TransactionSets)
                        {
                            // ===== Structured Mapping Flow =====
                            SetHeaders(isa, iea, gs, ge);
                            SetInformationSource(txn, record);       // 2000A
                            SetInformationReceiver(txn, record);     // 2000B
                            SetServiceProvider(txn, record);         // 2000C
                            SetDetail(txn, record);                  // 2000D/2000E
                            // ===================================

                            string ediOut =
                                isa.ToString() +
                                gs.ToString() +
                                txn.ToString() +
                                ge.ToString() +
                                iea.ToString() + "\r\n";

                            await File.AppendAllTextAsync(outFile, ediOut);
                        }
                    }
                }
            }

            timer.Stop();
            Console.WriteLine($"✅ 276 Generation Complete: {timer.ElapsedMilliseconds} ms");
            Console.WriteLine($"📁 File: {outFile}");
        }

        // ========== LOOPED BUILDERS ==========
        private static void SetHeaders(ISA isa, IEA iea, GS gs, GE ge)
        {
            string todayShort = DateTime.Now.ToString("yyMMdd");
            string todayLong = DateTime.Now.ToString("yyyyMMdd");
            string time = DateTime.Now.ToString("HHmm");
            string ctrl = GetControlNumber();

            isa.InterchangeDate.ParsedValue = todayShort;
            isa.InterchangeTime.ParsedValue = time;
            isa.InterchangeControlNumber = ctrl;
            iea.InterchangeControlNumber = ctrl;

            gs.CreateDate.ParsedValue = todayLong;
            gs.CreateTime.ParsedValue = time;
            gs.GroupControlNumber = int.Parse(ctrl);
            gs.VersionIdentifier = "005010X212";
            ge.GroupControlNumber = int.Parse(ctrl);
        }

        private static void SetInformationSource(X12Transaction txn, JsonElement record)
        {
            var payerLoop = txn.Loops.FirstOrDefault(l => l.SegmentId == "2000A");
            if (payerLoop == null) return;

            var nm1 = payerLoop.FindSegment<NM1>();
            if (nm1 != null)
            {
                nm1.EntityIdCode = "PR";
                nm1.EntityTypeQualifier = "2";
                nm1.Last = GetCSVValue(record, "PayerName");
                nm1.IdQualifier = "PI";
                nm1.IdCode = GetCSVValue(record, "PayerID");
            }
        }

        private static void SetInformationReceiver(X12Transaction txn, JsonElement record)
        {
            var recvLoop = txn.Loops.FirstOrDefault(l => l.SegmentId == "2000B");
            if (recvLoop == null) return;

            var nm1 = recvLoop.FindSegment<NM1>();
            if (nm1 != null)
            {
                nm1.EntityIdCode = "41";
                nm1.EntityTypeQualifier = "2";
                nm1.Last = GetCSVValue(record, "ProviderLN");
                nm1.First = GetCSVValue(record, "ProviderFN");
                nm1.IdQualifier = "46";
                nm1.IdCode = GetCSVValue(record, "ProviderID");
            }
        }

        private static void SetServiceProvider(X12Transaction txn, JsonElement record)
        {
            var svcLoop = txn.Loops.FirstOrDefault(l => l.SegmentId == "2000C");
            if (svcLoop == null) return;

            var nm1 = svcLoop.FindSegment<NM1>();
            if (nm1 != null)
            {
                nm1.EntityIdCode = "1P";
                nm1.EntityTypeQualifier = "2";
                nm1.Last = GetCSVValue(record, "ProviderLN");
                nm1.First = GetCSVValue(record, "ProviderFN");
                nm1.IdQualifier = "XX";
                nm1.IdCode = GetCSVValue(record, "ProviderID");
            }
        }

        private static void SetDetail(X12Transaction txn, JsonElement record)
        {
            string rel = GetCSVValue(record, "RelCode");
            bool isDep = !string.IsNullOrEmpty(rel) && rel != "18";
            if (isDep)
                SetDependent(txn, record);
            else
                SetSubscriber(txn, record);
        }

        private static void SetSubscriber(X12Transaction txn, JsonElement record)
        {
            var subLoop = txn.Loops.FirstOrDefault(l => l.SegmentId == "2000D");
            if (subLoop == null) return;

            // DMG
            if (!string.IsNullOrEmpty(GetCSVValue(record, "DOB")))
            {
                var dmg = new DMG
                {
                    DateOfBirth = { FormatQualifier = "D8", ParsedValue = ConvertMMDDYYYYtoYYYYMMDD(GetCSVValue(record, "DOB")) },
                    GenderCode = GetCSVValue(record, "Gender")
                };
                subLoop.AddSegment(dmg);
            }

            // NM1
            subLoop.AddSegment(new NM1
            {
                EntityIdCode = "IL",
                EntityTypeQualifier = "1",
                Last = GetCSVValue(record, "LN"),
                First = GetCSVValue(record, "FN"),
                IdQualifier = "MI",
                IdCode = GetCSVValue(record, "MemberID")
            });

            // TRN
            subLoop.AddSegment(new TRN
            {
                TraceTypeCode = "1",
                TraceNumber = GetCSVValue(record, "TraceNumber")
            });

            // REF
            AddREF(subLoop, "1K", GetCSVValue(record, "ClaimNumber"));
            AddREF(subLoop, "LU", GetCSVValue(record, "FacilityType"));
            AddREF(subLoop, "EJ", GetCSVValue(record, "TraceNumber"));

            // AMT
            if (!string.IsNullOrEmpty(GetCSVValue(record, "TotalSubmittedCharges")))
                subLoop.AddSegment(new AMT
                {
                    AmountQualifierCode = "T3",
                    Amount = GetCSVValue(record, "TotalSubmittedCharges")
                });

            // DTP
            if (!string.IsNullOrEmpty(GetCSVValue(record, "ClaimDateFrom")))
                subLoop.AddSegment(new DTP
                {
                    Qualifier = "472",
                    Date = { FormatQualifier = "RD8", ParsedValue = ConvertDateRange(GetCSVValue(record, "ClaimDateFrom"), GetCSVValue(record, "ClaimDateTo")) }
                });

            // SVC
            if (!string.IsNullOrEmpty(GetCSVValue(record, "ClaimStatus")))
            {
                SVC svc = new SVC();
                svc.Procedure.Identifier = "HC";
                svc.Procedure.Code = GetCSVValue(record, "ClaimStatus");
                svc.ChargeAmount.ParsedValue = GetCSVValue(record, "TotalSubmittedCharges");
                subLoop.AddSegment(svc);
            }
        }

        private static void SetDependent(X12Transaction txn, JsonElement record)
        {
            var depLoop = txn.Loops.FirstOrDefault(l => l.SegmentId == "2000E");
            if (depLoop == null) return;

            if (!string.IsNullOrEmpty(GetCSVValue(record, "DOB")))
            {
                DMG dmg = new DMG
                {
                    DateOfBirth = { FormatQualifier = "D8", ParsedValue = ConvertMMDDYYYYtoYYYYMMDD(GetCSVValue(record, "DOB")) },
                    GenderCode = GetCSVValue(record, "Gender")
                };
                depLoop.AddSegment(dmg);
            }

            depLoop.AddSegment(new NM1
            {
                EntityIdCode = "QC",
                EntityTypeQualifier = "1",
                Last = GetCSVValue(record, "LN"),
                First = GetCSVValue(record, "FN"),
                IdQualifier = "MI",
                IdCode = GetCSVValue(record, "MemberID")
            });

            depLoop.AddSegment(new TRN
            {
                TraceTypeCode = "1",
                TraceNumber = GetCSVValue(record, "TraceNumber")
            });

            depLoop.AddSegment(new DTP
            {
                Qualifier = "472",
                Date = { FormatQualifier = "RD8", ParsedValue = ConvertDateRange(GetCSVValue(record, "ClaimDateFrom"), GetCSVValue(record, "ClaimDateTo")) }
            });
        }

        // ========== HELPERS ==========
        private static void AddREF(Loop loop, string qualifier, string value)
        {
            if (!string.IsNullOrEmpty(value))
                loop.AddSegment(new REF { IdQualifier = qualifier, IdCode = value });
        }

        private static string GetCSVValue(JsonElement json, string field)
        {
            try { return json.GetProperty(field).GetString() ?? ""; }
            catch { return ""; }
        }

        private static string ConvertMMDDYYYYtoYYYYMMDD(string mmddyyyy)
        {
            if (DateTime.TryParseExact(mmddyyyy, "MMddyyyy", null,
                System.Globalization.DateTimeStyles.None, out var dt))
                return dt.ToString("yyyyMMdd");
            return mmddyyyy;
        }

        private static string ConvertDateRange(string from, string to)
        {
            if (DateTime.TryParse(from, out var f) && DateTime.TryParse(to, out var t))
                return $"{f:yyyyMMdd}-{t:yyyyMMdd}";
            return "";
        }

        private static string GetControlNumber()
        {
            var rnd = new Random();
            return rnd.Next(100000000, 999999999).ToString();
        }

        private static string ParseCSVToJson(string file, string defaultHeader)
        {
            var lines = File.ReadAllLines(file);
            if (lines.Length == 0) return "[]";

            string[] headers;
            int startLine = 1;
            if (!lines[0].Contains("TxnType", StringComparison.OrdinalIgnoreCase))
            {
                headers = defaultHeader.Split(',');
                startLine = 0;
            }
            else headers = lines[0].Split(',');

            var records = new List<Dictionary<string, string>>();
            for (int i = startLine; i < lines.Length; i++)
            {
                var values = lines[i].Split(',');
                var rec = new Dictionary<string, string>();
                for (int j = 0; j < headers.Length && j < values.Length; j++)
                    rec[headers[j]] = values[j];
                records.Add(rec);
            }
            return JsonSerializer.Serialize(records, new JsonSerializerOptions { WriteIndented = true });
        }

        private static string GetBase276Template()
        {
            return
                "ISA*00*          *00*          *ZZ*770545613      *ZZ*770545613      *990101*1200*^*00501*123456789*0*P*:~" +
                "GS*HR*770545613*XXXXXXXXX*20990101*1200*12345*X*005010X212~" +
                "ST*276*0001*005010X212~" +
                "BHT*0010*13*12345*20290101*1200~" +
                "HL*1**20*1~NM1*PR*2*XXXXX*****PI*XXXXX~" +
                "HL*2*1*21*1~NM1*41*2*XXXXX*****46*XXXXXXX~" +
                "HL*3*2*19*1~NM1*1P*2******XX*XXXXXXXXX~" +
                "HL*4*3*22*0~DMG*D8*19621105~NM1*IL*1*XXXXX*XXXXXX****MI*XXXXXXXX~" +
                "TRN*1*XXXXXX*CLAIMTRACE~DTP*472*RD8*20250101-20250115~" +
                "SE*14*0001~GE*1*12345~IEA*1*123456789~";
        }
    }
}
