using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Threading.Tasks;
using Domain.X12;
using Domain.X12.Fields;
using Domain.X12.Loops;
using Domain.X12.Parsers;
using Domain.X12.Segments;

namespace CSVRealtimeParser276
{
    class Claim276CSVParser
    {
        static async Task Main(string[] args)
        {
            string csv276File = "C:\\Users\\slikhith\\CsvToX12\\Portal_87726_test_csi.csv";
            string outputDir = "C:\\Users\\slikhith\\Documents\\creates-276";
            Directory.CreateDirectory(outputDir);

            string defaultHeader = 
                "TxnType,ClaimNumber,MemberID,LN,FN,DOB,Gender,ProviderID,ProviderLN,ProviderFN,PayerID,PayerName," +
                "ClaimDateFrom,ClaimDateTo,TraceNumber,TotalSubmittedCharges,FacilityType,ClaimStatus,RelCode";

            string claimStatusBase = GetBase276Template();

            string jsonOutput = ParseCSVToJson(csv276File, defaultHeader);
            using JsonDocument csvJson = JsonDocument.Parse(jsonOutput);

            string currentTimeSuffix = DateTime.Now.ToString("HHmmssFFF");
            string outFile = Path.Combine(outputDir, $"created-276_{currentTimeSuffix}.txt");

            Stopwatch timer = Stopwatch.StartNew();

            X12Parser parser = new X12Parser();

            foreach (JsonElement record in csvJson.RootElement.EnumerateArray())
            {
                var x12Data = parser.ParseString(claimStatusBase);
                var interChanges = x12Data.Interchanges;

                foreach (var interChange in interChanges)
                {
                    var isa = interChange.ISA;
                    var iea = interChange.IEA;

                    foreach (var group in interChange.Groups)
                    {
                        var gs = group.GS;
                        var ge = group.GE;
                        var transaction = group.TransactionSets.FirstOrDefault();

                        // ===== Structured Build Flow =====
                        SetHeaders(isa, iea, gs, ge);
                        SetInformationSource(transaction, record);   // 2000A
                        SetInformationReceiver(transaction, record); // 2000B
                        SetServiceProvider(transaction, record);     // 2000C
                        SetDetail(transaction, record);              // 2000D / 2000E
                        // ==================================

                        string x12Out =
                            isa.ToString() +
                            gs.ToString() +
                            transaction.ToString() +
                            ge.ToString() +
                            iea.ToString() + "\r\n";

                        await File.AppendAllTextAsync(outFile, x12Out);
                    }
                }
            }

            timer.Stop();
            Console.WriteLine($"‚úÖ 276 X12 generation completed in {timer.ElapsedMilliseconds} ms");
            Console.WriteLine($"üìÅ Output File: {outFile}");
        }

        // ---------- SEGMENT-BUILDING METHODS ----------
        private static void SetHeaders(ISA isa, IEA iea, GS gs, GE ge)
        {
            string todayLong = DateTime.Now.ToString("yyyyMMdd");
            string todayShort = DateTime.Now.ToString("yyMMdd");
            string time = DateTime.Now.ToString("HHmm");
            string control = GetControlNumber();

            isa.InterchangeDate.ParsedValue = todayShort;
            isa.InterchangeTime.ParsedValue = time;
            isa.InterchangeControlNumber = control;
            iea.InterchangeControlNumber = control;

            gs.CreateDate.ParsedValue = todayLong;
            gs.CreateTime.ParsedValue = time;
            gs.GroupControlNumber = int.Parse(control);
            gs.VersionIdentifier = "005010X212";

            ge.GroupControlNumber = int.Parse(control);
        }

        private static void SetInformationSource(TransactionSet transaction, JsonElement record)
        {
            var payerLoop = transaction.Segments.OfType<Loop>().FirstOrDefault(l => l.SegmentId == "2000A");
            var payerNM1 = payerLoop?.Segments.OfType<NM1>().FirstOrDefault();
            if (payerNM1 != null)
            {
                payerNM1.EntityIdCode = "PR";
                payerNM1.EntityTypeQualifier = "2";
                payerNM1.Last = GetCSVValue(record, "PayerName");
                payerNM1.IdQualifier = "PI";
                payerNM1.IdCode = GetCSVValue(record, "PayerID");
            }
        }

        private static void SetInformationReceiver(TransactionSet transaction, JsonElement record)
        {
            var providerLoop = transaction.Segments.OfType<Loop>().FirstOrDefault(l => l.SegmentId == "2000B");
            var providerNM1 = providerLoop?.Segments.OfType<NM1>().FirstOrDefault();
            if (providerNM1 != null)
            {
                providerNM1.EntityIdCode = "41";
                providerNM1.EntityTypeQualifier = "2";
                providerNM1.Last = GetCSVValue(record, "ProviderLN");
                providerNM1.First = GetCSVValue(record, "ProviderFN");
                providerNM1.IdQualifier = "46";
                providerNM1.IdCode = GetCSVValue(record, "ProviderID");
            }
        }

        private static void SetServiceProvider(TransactionSet transaction, JsonElement record)
        {
            var serviceLoop = transaction.Segments.OfType<Loop>().FirstOrDefault(l => l.SegmentId == "2000C");
            var serviceNM1 = serviceLoop?.Segments.OfType<NM1>().FirstOrDefault();
            if (serviceNM1 != null)
            {
                serviceNM1.EntityIdCode = "1P";
                serviceNM1.EntityTypeQualifier = "2";
                serviceNM1.Last = GetCSVValue(record, "ProviderLN");
                serviceNM1.First = GetCSVValue(record, "ProviderFN");
                serviceNM1.IdQualifier = "XX";
                serviceNM1.IdCode = GetCSVValue(record, "ProviderID");
            }
        }

        private static void SetDetail(TransactionSet transaction, JsonElement record)
        {
            bool isDependent = GetCSVValue(record, "RelCode") != "18";
            if (isDependent) SetDependent(transaction, record);
            else SetSubscriber(transaction, record);
        }

        private static void SetSubscriber(TransactionSet transaction, JsonElement record)
        {
            var subsLoop = transaction.Segments.OfType<Loop>().FirstOrDefault(l => l.SegmentId == "2000D");
            if (subsLoop == null) return;

            // --- DMG ---
            if (!string.IsNullOrEmpty(GetCSVValue(record, "DOB")))
            {
                DMG dmg = new DMG
                {
                    DateOfBirth = { FormatQualifier = "D8", ParsedValue = ConvertMMDDYYYYtoYYYYMMDD(GetCSVValue(record, "DOB")) },
                    GenderCode = GetCSVValue(record, "Gender")
                };
                subsLoop.AddSegment(dmg);
            }

            // --- NM1 (Subscriber) ---
            subsLoop.AddSegment(new NM1
            {
                EntityIdCode = "IL",
                EntityTypeQualifier = "1",
                Last = GetCSVValue(record, "LN"),
                First = GetCSVValue(record, "FN"),
                IdQualifier = "MI",
                IdCode = GetCSVValue(record, "MemberID")
            });

            // --- TRN (Trace) ---
            subsLoop.AddSegment(new TRN
            {
                TraceTypeCode = "1",
                TraceNumber = GetCSVValue(record, "TraceNumber")
            });

            // --- REF Segments ---
            AddREF(subsLoop, "1K", GetCSVValue(record, "ClaimNumber"));         // Claim Control Number
            AddREF(subsLoop, "LU", GetCSVValue(record, "FacilityType"));        // Facility Type
            AddREF(subsLoop, "6P", GetCSVValue(record, "Group"));               // Group
            AddREF(subsLoop, "EJ", GetCSVValue(record, "TraceNumber"));         // Patient Account No

            // --- AMT ---
            if (!string.IsNullOrEmpty(GetCSVValue(record, "TotalSubmittedCharges")))
            {
                subsLoop.AddSegment(new AMT
                {
                    AmountQualifierCode = "T3",
                    Amount = GetCSVValue(record, "TotalSubmittedCharges")
                });
            }

            // --- DTP (Service Date) ---
            if (!string.IsNullOrEmpty(GetCSVValue(record, "ClaimDateFrom")))
            {
                DTP dtp = new DTP
                {
                    Qualifier = "472",
                    Date = { FormatQualifier = "RD8", ParsedValue = ConvertDateRange(GetCSVValue(record, "ClaimDateFrom"), GetCSVValue(record, "ClaimDateTo")) }
                };
                subsLoop.AddSegment(dtp);
            }

            // --- SVC (Service line) ---
            if (!string.IsNullOrEmpty(GetCSVValue(record, "ClaimStatus")))
            {
                SVC svc = new SVC();
                svc.Procedure.Identifier = "HC"; // Hardcoded as Healthcare Code
                svc.Procedure.Code = GetCSVValue(record, "ClaimStatus");
                svc.ChargeAmount.ParsedValue = GetCSVValue(record, "TotalSubmittedCharges");
                subsLoop.AddSegment(svc);
            }
        }

        private static void SetDependent(TransactionSet transaction, JsonElement record)
        {
            var depLoop = transaction.Segments.OfType<Loop>().FirstOrDefault(l => l.SegmentId == "2000E");
            if (depLoop == null) return;

            // Similar to subscriber, with NM101 = QC
            if (!string.IsNullOrEmpty(GetCSVValue(record, "DOB")))
            {
                DMG dmg = new DMG
                {
                    DateOfBirth = { FormatQualifier = "D8", ParsedValue = ConvertMMDDYYYYtoYYYYMMDD(GetCSVValue(record, "DOB")) },
                    GenderCode = GetCSVValue(record, "Gender")
                };
                depLoop.AddSegment(dmg);
            }

            depLoop.AddSegment(new NM1
            {
                EntityIdCode = "QC",
                EntityTypeQualifier = "1",
                Last = GetCSVValue(record, "LN"),
                First = GetCSVValue(record, "FN"),
                IdQualifier = "MI",
                IdCode = GetCSVValue(record, "MemberID")
            });

            depLoop.AddSegment(new TRN
            {
                TraceTypeCode = "1",
                TraceNumber = GetCSVValue(record, "TraceNumber")
            });

            DTP dtp = new DTP
            {
                Qualifier = "472",
                Date = { FormatQualifier = "RD8", ParsedValue = ConvertDateRange(GetCSVValue(record, "ClaimDateFrom"), GetCSVValue(record, "ClaimDateTo")) }
            };
            depLoop.AddSegment(dtp);
        }

        // ---------- HELPERS ----------
        private static void AddREF(Loop loop, string qualifier, string value)
        {
            if (!string.IsNullOrEmpty(value))
                loop.AddSegment(new REF { IdQualifier = qualifier, IdCode = value });
        }

        private static string GetCSVValue(JsonElement json, string field)
        {
            try { return json.GetProperty(field).GetString() ?? ""; }
            catch { return ""; }
        }

        private static string ConvertMMDDYYYYtoYYYYMMDD(string mmddyyyy)
        {
            if (DateTime.TryParseExact(mmddyyyy, "MMddyyyy", null,
                System.Globalization.DateTimeStyles.None, out var dt))
                return dt.ToString("yyyyMMdd");
            return mmddyyyy;
        }

        private static string ConvertDateRange(string from, string to)
        {
            if (DateTime.TryParse(from, out var f) && DateTime.TryParse(to, out var t))
                return $"{f:yyyyMMdd}-{t:yyyyMMdd}";
            return "";
        }

        private static string GetControlNumber()
        {
            var rnd = new Random();
            return rnd.Next(100000000, 999999999).ToString();
        }

        private static string ParseCSVToJson(string filePath, string defaultHeader)
        {
            var lines = File.ReadAllLines(filePath);
            if (lines.Length == 0) return "[]";

            string[] headers;
            int startLine = 1;

            if (!lines[0].Contains("TxnType", StringComparison.OrdinalIgnoreCase))
            {
                headers = defaultHeader.Split(',');
                startLine = 0;
            }
            else headers = lines[0].Split(',');

            var records = new List<Dictionary<string, string>>();
            for (int i = startLine; i < lines.Length; i++)
            {
                var values = lines[i].Split(',');
                var rec = new Dictionary<string, string>();
                for (int j = 0; j < headers.Length && j < values.Length; j++)
                    rec[headers[j]] = values[j];
                records.Add(rec);
            }
            return JsonSerializer.Serialize(records, new JsonSerializerOptions { WriteIndented = true });
        }

        private static string GetBase276Template()
        {
            return
                "ISA*00*          *00*          *ZZ*770545613      *ZZ*770545613      *990101*1200*^*00501*123456789*0*P*:~" +
                "GS*HR*770545613*XXXXXXXXX*20990101*1200*12345*X*005010X212~" +
                "ST*276*0001*005010X212~" +
                "BHT*0010*13*12345*20290101*1200~" +
                "HL*1**20*1~NM1*PR*2*XXXXX*****PI*XXXXX~" +
                "HL*2*1*21*1~NM1*41*2*XXXXX*****46*XXXXXXX~" +
                "HL*3*2*19*1~NM1*1P*2******XX*XXXXXXXXX~" +
                "HL*4*3*22*0~DMG*D8*19621105~NM1*IL*1*XXXXX*XXXXXX****MI*XXXXXXXX~" +
                "TRN*1*XXXXXX*CLAIMTRACE~DTP*472*RD8*20250101-20250115~" +
                "SE*14*0001~GE*1*12345~IEA*1*123456789~";
        }
    }
}
