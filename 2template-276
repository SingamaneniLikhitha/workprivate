using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Threading.Tasks;
using Domain.X12;
using Domain.X12.Fields;
using Domain.X12.Loops;
using Domain.X12.Parsers;
using Domain.X12.Segments;
using Newtonsoft.Json.Linq;

namespace RelayHealth.Realtime.Batch.Parser.Converter
{
    public class CSVToX12276
    {
        public void CSVToX12276Main()
        {
            X12Parser x12Parser = new X12Parser();
            X12Message x12Message;
            GS gsSegment;
            ISA isaSegment;
            IEA ieaSegment;
            GE geSegment;
            InterchangeControlLoop interchangeLoop;

            Stopwatch timer = new Stopwatch();
            timer.Start();

            // ---------- CONFIGURATION ----------
            string csv276File = "C:\\Users\\slikhith\\CsvToX12\\Portal_87726_test_csi.csv";
            string outputDir = "C:\\Users\\slikhith\\Documents\\creates-276.";

            Directory.CreateDirectory(outputDir);

            string defaultHeader =
                "TxnType,ClaimNumber,MemberID,LN,FN,DOB,Gender,ProviderID,ProviderLN,ProviderFN,PayerID,PayerName,ClaimDateFrom,ClaimDateTo,TraceNumber,TotalSubmittedCharges,FacilityType,ClaimStatus,Group,ProcCodeQualifier,ProcCodes,ProcCodeModifier,LineItemChargeAmount,ProcUnits,ServiceLineNumber,ProcDates,RelCode,DependentLN,DependentFN,DependentMI,DependentDOB,DependentGender";

            // ---------- TWO 276 BASE TEMPLATES ----------

            // Subscriber-only HL stack (no child under subscriber)
            string claimStatusBaseSubscriber =
                "ISA*00*          *00*          *ZZ*770545613      *ZZ*00060          *060207*1056*^*00501*000000001*0*P*:~" +
                "GS*HR*770545613*00060*20110401*105608*4056*X*005010X212~" +
                "ST*276*0001*005010X212~" +
                "BHT*0010*13**20110401~" +
                "HL*1**20*1~" +
                "NM1*PR*2******PI~" +
                "HL*2*1*21*1~" +
                "NM1*41*1******46~" +
                "HL*3*2*19*1~" +
                "NM1*1P*1******FI~" +
                "HL*4*3*22*0~" +   // subscriber HL; no child
                "NM1*IL*1******24~" +
                "SE*11*0001~" +
                "GE*1*1~" +
                "IEA*1*000000001~";

            // Dependent HL stack (subscriber with child dependent HL)
            string claimStatusBaseDependent =
                "ISA*00*          *00*          *ZZ*770545613      *ZZ*00060          *060207*1056*^*00501*000000001*0*P*:~" +
                "GS*HR*770545613*00060*20110401*105608*4056*X*005010X212~" +
                "ST*276*0001*005010X212~" +
                "BHT*0010*13**20110401~" +
                "HL*1**20*1~" +
                "NM1*PR*2******PI~" +
                "HL*2*1*21*1~" +
                "NM1*41*1******46~" +
                "HL*3*2*19*1~" +
                "NM1*1P*1******FI~" +
                "HL*4*3*22*1~" +   // subscriber HL; HAS child
                "NM1*IL*1******24~" +
                "HL*5*4*23*0~" +   // dependent HL
                "NM1*QC*1~" +     // dependent NM1 stub; we’ll fill names
                "SE*13*0001~" +
                "GE*1*1~" +
                "IEA*1*000000001~";

            // ---------- READ CSV ----------
            string jsonOutput = ParseCSVToJson(csv276File, defaultHeader);
            JArray csvJson = JArray.Parse(jsonOutput);

            string currentTimeSSS_FileExt = DateTime.Now.ToString("HHmmssFFF");
            string outFile = Path.Combine(outputDir, $"created-276_{currentTimeSSS_FileExt}.txt");

            foreach (JObject record in csvJson)
            {
                // Decide patient type like Java: 18 or blank => subscriber; else dependent
                bool isDependent = IsDependent(record);

                // Pick one of the two templates ONLY (as requested)
                string baseToUse = isDependent ? claimStatusBaseDependent : claimStatusBaseSubscriber;

                var x12Data = x12Parser.ParseString(baseToUse);
                var interChanges = x12Data.Interchanges;
                x12Message = new X12Message();

                string today_YYYYMMDD = DateTime.Now.ToString("yyyyMMdd");
                string currentTime = DateTime.Now.ToString("HH:mm");
                string currentTimeSSS = DateTime.Now.ToString("HHmm");
                string isaControlNumber = GetControlNumber();
                string gsControlNumber = GetControlNumber();

                foreach (var interChange in interChanges)
                {
                    interchangeLoop = new InterchangeControlLoop();
                    isaSegment = interChange.ISA;
                    ieaSegment = interChange.IEA;

                    foreach (var group in interChange.Groups)
                    {
                        gsSegment = group.GS;
                        geSegment = group.GE;

                        foreach (var transactionset in group.TransactionSets)
                        {
                            var stSegment = transactionset.Segments.OfType<ST>().FirstOrDefault();
                            var bhtSegment = transactionset.Segments.OfType<BHT>().FirstOrDefault();

                            // --- Update ISA / GS / GE / IEA ---
                            isaSegment.InterchangeDate.ParsedValue = today_YYYYMMDD;
                            isaSegment.InterchangeTime.ParsedValue = currentTime;
                            isaSegment.InterchangeControlNumber = isaControlNumber;
                            ieaSegment.InterchangeControlNumber = isaControlNumber;

                            gsSegment.CreateDate.ParsedValue = today_YYYYMMDD;
                            gsSegment.CreateTime.ParsedValue = currentTime;
                            gsSegment.GroupControlNumber = int.Parse(gsControlNumber);
                            geSegment.GroupControlNumber = int.Parse(gsControlNumber);

                            bhtSegment.OriginatorIdentifier = isaControlNumber;
                            bhtSegment.CreateDate.ParsedValue = today_YYYYMMDD;
                            bhtSegment.CreateTime.ParsedValue = currentTimeSSS;

                            // --- PAYER LOOP (2000A/2100A) ---
                            var payerLoop = transactionset.Segments.OfType<Loop>().FirstOrDefault(l => l.SegmentId == "2000A");
                            var payerNameLoop = payerLoop?.Segments.OfType<Loop>().FirstOrDefault(l => l.SegmentId == "2100A");
                            var payerNM1 = payerNameLoop?.Segments.OfType<NM1>().FirstOrDefault();
                            if (payerNM1 != null)
                            {
                                payerNM1.Last = GetCSVValue(record, "PayerName");
                                payerNM1.IdQualifier = "PI";
                                payerNM1.IdCode = GetCSVValue(record, "PayerID");
                            }

                            // --- PROVIDER LOOP (2000B/2100B) ---
                            var providerLoop = transactionset.Segments.OfType<Loop>().FirstOrDefault(l => l.SegmentId == "2000B");
                            var providerNameLoop = providerLoop?.Segments.OfType<Loop>().FirstOrDefault(l => l.SegmentId == "2100B");
                            var providerNM1 = providerNameLoop?.Segments.OfType<NM1>().FirstOrDefault();
                            if (providerNM1 != null)
                            {
                                providerNM1.Last = GetCSVValue(record, "ProviderLN");
                                providerNM1.First = GetCSVValue(record, "ProviderFN");
                                providerNM1.IdQualifier = "XX";
                                providerNM1.IdCode = GetCSVValue(record, "ProviderID");
                            }

                            // --- CLAIM/PATIENT LOOP (kept exactly as you have) ---
                            var claimLoop = transactionset.Segments.OfType<Loop>().FirstOrDefault(l => l.SegmentId == "2000C");
                            if (claimLoop != null)
                            {
                                // DMG
                                if (!string.IsNullOrEmpty(GetCSVValue(record, "DOB")))
                                {
                                    DMG dmg = new DMG();
                                    dmg.DateOfBirth.FormatQualifier = "D8";
                                    dmg.DateOfBirth.ParsedValue = ConvertMMDDYYYYtoYYYYMMDD(GetCSVValue(record, "DOB"));
                                    dmg.GenderCode = GetCSVValue(record, "Gender");
                                    claimLoop.AddSegment(dmg);
                                }

                                // NM1 – Subscriber
                                claimLoop.AddSegment(new NM1
                                {
                                    Last = GetCSVValue(record, "LN"),
                                    First = GetCSVValue(record, "FN"),
                                    IdQualifier = "MI",
                                    IdCode = GetCSVValue(record, "MemberID")
                                });

                                // TRN
                                claimLoop.AddSegment(new TRN
                                {
                                    TraceTypeCode = "1",
                                    TraceNumber = GetCSVValue(record, "TraceNumber"),
                                });

                                // REF segments
                                AddRefSegment(claimLoop, "1K", GetCSVValue(record, "ClaimNumber"));   // Request Number
                                AddRefSegment(claimLoop, "BLT", SafeJoin(GetCSVValue(record, "FacilityType"), GetCSVValue(record, "ClaimStatus")));
                                AddRefSegment(claimLoop, "LU", GetCSVValue(record, "FacilityType"));
                                AddRefSegment(claimLoop, "6P", GetCSVValue(record, "Group"));
                                AddRefSegment(claimLoop, "EJ", GetCSVValue(record, "TraceNumber"));

                                // AMT segment (left as-is)
                                if (!string.IsNullOrEmpty(GetCSVValue(record, "TotalSubmittedCharges")))
                                {
                                    AMT amt = new AMT();
                                    amt.AmountQualifierCode = "T3";
                                    claimLoop.AddSegment(amt);
                                }

                                // DTP (Claim Service Date)
                                if (!string.IsNullOrEmpty(GetCSVValue(record, "ClaimDateFrom")))
                                {
                                    DTP dtp = new DTP();
                                    dtp.Qualifier = "472";
                                    dtp.Date.FormatQualifier = "RD8";
                                    dtp.Date.ParsedValue = ConvertDateRange(
                                        GetCSVValue(record, "ClaimDateFrom"),
                                        GetCSVValue(record, "ClaimDateTo"));
                                    claimLoop.AddSegment(dtp);
                                }

                                // SVC Segment (Service Line)
                                if (!string.IsNullOrEmpty(GetCSVValue(record, "ProcCodes")))
                                {
                                    SVC svc = new SVC();
                                    svc.Procedure = new ProcedureIdentifier
                                    {
                                        Qualifier = GetCSVValue(record, "ProcCodeQualifier"),
                                        Code = GetCSVValue(record, "ProcCodes"),
                                    };
                                    svc.ChargeAmount.ParsedValue = GetCSVValue(record, "LineItemChargeAmount");
                                    svc.UnitsOfServicePaidCount.ParsedValue = GetCSVValue(record, "ProcUnits");
                                    claimLoop.AddSegment(svc);
                                }

                                // REF FJ (Service Line Number)
                                AddRefSegment(claimLoop, "FJ", GetCSVValue(record, "ServiceLineNumber"));

                                // DTP (Procedure Date)
                                if (!string.IsNullOrEmpty(GetCSVValue(record, "ProcDates")))
                                {
                                    DTP procDtp = new DTP();
                                    procDtp.Qualifier = "472";
                                    procDtp.Date.FormatQualifier = "D8";
                                    procDtp.Date.ParsedValue = ConvertMMDDYYYYtoYYYYMMDD(GetCSVValue(record, "ProcDates"));
                                    claimLoop.AddSegment(procDtp);
                                }
                            }

                            // --- If dependent, populate the dependent name & DMG under 2000E/2100E (present only in dependent template) ---
                            if (isDependent)
                            {
                                var depLoop = transactionset.Segments.OfType<Loop>().FirstOrDefault(l => l.SegmentId == "2000E");
                                var depNameLoop = depLoop?.Segments.OfType<Loop>().FirstOrDefault(l => l.SegmentId == "2100E");
                                var depNM1 = depNameLoop?.Segments.OfType<NM1>().FirstOrDefault();
                                if (depNM1 != null)
                                {
                                    depNM1.Last = GetCSVValue(record, "DependentLN");
                                    depNM1.First = GetCSVValue(record, "DependentFN");
                                    depNM1.Middle = GetCSVValue(record, "DependentMI");
                                }
                                if (depLoop != null && !string.IsNullOrEmpty(GetCSVValue(record, "DependentDOB")))
                                {
                                    DMG dmgDep = new DMG();
                                    dmgDep.DateOfBirth.FormatQualifier = "D8";
                                    dmgDep.DateOfBirth.ParsedValue = ConvertMMDDYYYYtoYYYYMMDD(GetCSVValue(record, "DependentDOB"));
                                    dmgDep.GenderCode = GetCSVValue(record, "DependentGender");
                                    depLoop.AddSegment(dmgDep);
                                }
                            }

                            // --- WRITE FILE ---
                            string x12String =
                                isaSegment.ToString() +
                                gsSegment.ToString() +
                                transactionset.ToString() +
                                geSegment.ToString() +
                                ieaSegment.ToString() + "\r\n";

                            File.AppendAllText(outFile, x12String, Encoding.UTF8);
                        }
                    }
                }
            }

            timer.Stop();
            Console.WriteLine("276 X12 generation completed in " + timer.ElapsedMilliseconds + " ms");
            Console.WriteLine("Output File: " + outFile);
        }

        // ---------- HELPERS ----------
        private static void AddRefSegment(Loop loop, string qualifier, string value)
        {
            if (!string.IsNullOrEmpty(value))
            {
                REF refSeg = new REF();
                refSeg.IdQualifier = qualifier;
                refSeg.IdCode = value;
                loop.AddSegment(refSeg);
            }
        }

        private static string GetCSVValue(JObject json, string field)
        {
            return json[field]?.ToString() ?? "";
        }

        private static string ConvertMMDDYYYYtoYYYYMMDD(string mmddyyyy)
        {
            if (DateTime.TryParseExact(mmddyyyy, "MMddyyyy", null,
                System.Globalization.DateTimeStyles.None, out var dt))
                return dt.ToString("yyyyMMdd");
            return mmddyyyy;
        }

        private static string ConvertDateRange(string from, string to)
        {
            if (DateTime.TryParse(from, out var f) && DateTime.TryParse(to, out var t))
                return $"{f:yyyyMMdd}-{t:yyyyMMdd}";
            return "";
        }

        private static string GetControlNumber()
        {
            var rnd = new Random();
            return rnd.Next(100000000, 999999999).ToString();
        }

        public static string ParseCSVToJson(string filePath, string defaultHeader)
        {
            var lines = File.ReadAllLines(filePath);
            if (lines.Length == 0) return "[]";

            string[] headers;
            int startLine = 1;

            if (lines[0].IndexOf("TxnType", StringComparison.OrdinalIgnoreCase) != -1)
            {
                headers = lines[0].Split(',');
                startLine = 1;
            }
            else
            {
                headers = defaultHeader.Split(',');
                startLine = 0;
            }

            var records = new List<Dictionary<string, string>>();
            for (int i = startLine; i < lines.Length; i++)
            {
                var values = lines[i].Split(',');
                var rec = new Dictionary<string, string>();
                for (int j = 0; j < headers.Length && j < values.Length; j++)
                    rec[headers[j]] = values[j];
                records.Add(rec);
            }
            return Newtonsoft.Json.JsonConvert.SerializeObject(records, Newtonsoft.Json.Formatting.Indented);
        }

        // Java-like decision: RelCode blank => "18" (Self/subscriber). Anything else => dependent.
        private static bool IsDependent(JObject record)
        {
            var rel = GetCSVValue(record, "RelCode");
            if (string.IsNullOrWhiteSpace(rel)) rel = "18";
            return !rel.Equals("18", StringComparison.OrdinalIgnoreCase);
        }

        private static string SafeJoin(string a, string b)
        {
            if (string.IsNullOrEmpty(a) && string.IsNullOrEmpty(b)) return "";
            return (a ?? "") + (b ?? "");
        }
    }
}
