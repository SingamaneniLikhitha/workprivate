			throw new ApplicationException("An error occured during parsing, check that this is a valid claim file.", innerException);

That means your current Domain.X12.Definitions assembly probably has:

✅ a HS_005010X279_Definition (for 270/271)

❌ but no HR_005010X212_Definition (for 276/277)



using System;
using System.IO;
using Domain.X12.Definitions;
using Domain.X12.Loops;
using Domain.X12.Segments;

namespace Domain.X12.Parsers;

public class X12Parser
{
	private StreamingSegmentLexer _segmentReader = new StreamingSegmentLexer();

	public X12Message ParseFile(string fileName)
	{
		_segmentReader.InitializeFromFile(fileName);
		return Parse();
	}

	public X12Message ParseString(string x12data)
	{
		_segmentReader.InitializeFromString(x12data);
		return Parse();
	}

	public X12Message ParseStream(Stream x12data)
	{
		_segmentReader.Initialize(x12data);
		return Parse();
	}

	private X12Message Parse()
	{
		X12Message x12Message = new X12Message();
		x12Message.Delimiters.Segment = _segmentReader._SEG;
		x12Message.Delimiters.Element = _segmentReader._ELM;
		x12Message.Delimiters.SubElement = _segmentReader._SUB;
		try
		{
			ParseInterchanges(x12Message);
			if (_segmentReader.SegmentExists)
			{
				throw new ApplicationException("Unrecognized segments remain after parsing.");
			}
			return x12Message;
		}
		catch (Exception innerException)
		{
			throw new ApplicationException("An error occured during parsing, check that this is a valid claim file.", innerException);
		}
		finally
		{
			_segmentReader.Close();
		}
	}

	private void ParseInterchanges(X12Message parsedMessage)
	{
		while (_segmentReader.SegmentExists && _segmentReader.Peek().Id == "ISA")
		{
			InterchangeControlLoop interchangeControlLoop = new InterchangeControlLoop();
			parsedMessage.Interchanges.Enqueue(interchangeControlLoop);
			ISA iSA = ISA.Parse(_segmentReader.Dequeue());
			iSA.SegmentName = "Interchange Header";
			interchangeControlLoop.AddSegment(iSA);
			if (_segmentReader.Peek().Id == "TA1")
			{
				interchangeControlLoop.AddSegment(TA1.Parse(_segmentReader.Dequeue()));
			}
			if (_segmentReader.Peek().Id == "GS")
			{
				ParseFunctionalGroups(interchangeControlLoop);
			}
			if (_segmentReader.Peek().Id == "IEA")
			{
				IEA iEA = IEA.Parse(_segmentReader.Dequeue());
				iEA.SegmentName = "Interchange Trailer";
				interchangeControlLoop.AddSegment(iEA);
				continue;
			}
			throw new ApplicationException("Interchange ended with no IEA segment.");
		}
	}

	private void ParseFunctionalGroups(InterchangeControlLoop interchange)
	{
		while (_segmentReader.SegmentExists && _segmentReader.Peek().Id == "GS")
		{
			FunctionalGroupLoop functionalGroupLoop = new FunctionalGroupLoop();
			interchange.AddSegment(functionalGroupLoop);
			GS gS = GS.Parse(_segmentReader.Dequeue());
			gS.SegmentName = "Group Header";
			functionalGroupLoop.AddSegment(gS);
			LoopRule transactionDefinition = DefinitionFactory.GetTransactionDefinition(gS.FunctionalIdentifier, gS.VersionIdentifier);
			foreach (Loop item in new DefinitionParser(_segmentReader).Parse(transactionDefinition))
			{
				functionalGroupLoop.AddSegment(item);
			}
			if (_segmentReader.Peek().Id == "GE")
			{
				GE gE = GE.Parse(_segmentReader.Dequeue());
				gE.SegmentName = "Group Trailer";
				functionalGroupLoop.AddSegment(gE);
				continue;
			}
			throw new ApplicationException("Group ended with no GE segment.");
		}
	}
}
