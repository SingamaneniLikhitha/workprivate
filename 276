using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Threading.Tasks;
using Domain.X12;
using Domain.X12.Fields;
using Domain.X12.Loops;
using Domain.X12.Parsers;
using Domain.X12.Segments;
using Newtonsoft.Json.Linq;

namespace RelayHealth.Realtime.Batch.Parser.Converter
{
    public class CSVToX12276
    {
        public void CSVToX12276Main()
        {
            X12Parser x12Parser = new X12Parser();
            X12Message x12Message;
            GS gsSegment;
            ISA isaSegment;
            IEA ieaSegment;
            GE geSegment;
            InterchangeControlLoop interchangeLoop;

            Stopwatch timer = new Stopwatch();
            timer.Start();

            // ---------- CONFIGURATION ----------
            string csv276File = "C:\\Users\\slikhith\\CsvToX12\\Portal_87726_test_csi.csv";
            string outputDir = "C:\\Users\\slikhith\\Documents\\creates-276.";
            Directory.CreateDirectory(outputDir);

            string defaultHeader =
                "TxnType,ClaimNumber,MemberID,LN,FN,DOB,Gender,ProviderID,ProviderLN,ProviderFN,PayerID,PayerName,ClaimDateFrom,ClaimDateTo,TraceNumber,TotalSubmittedCharges,FacilityType,ClaimStatus,Group,ProcCodeQualifier,ProcCodes,ProcCodeModifier,LineItemChargeAmount,ProcUnits,ServiceLineNumber,ProcDates";

            // ---------- 276 BASE TEMPLATE ----------
            string claimStatusBase =
                "ISA*00*          *00*          *ZZ*770545613      *ZZ*00060          *060207*1056*^*00501*000000001*0*P*:~"
                + "GS*HR*770545613*00060*20110401*105608*4056*X*005010X212~"
                + "ST*276*0001*005010X212~"
                + "BHT*0010*13**20110401~"
                + "HL*1**20*1~"
                + "NM1*PR*2******PI~"
                + "HL*2*1*21*1~"
                + "NM1*41*1******46~"
                + "HL*3*2*19*1~"
                + "NM1*1P*1******FI~"
                + "HL*4*3*22*0~"
                + "NM1*IL*1******24~"
                + "SE*11*0001~"
                + "GE*1*1~"
                + "IEA*1*000000001~";

            // ---------- READ CSV ----------
            string jsonOutput = ParseCSVToJson(csv276File, defaultHeader);
            JArray csvJson = JArray.Parse(jsonOutput);

            string currentTimeSSS_FileExt = DateTime.Now.ToString("HHmmssFFF");
            string outFile = Path.Combine(outputDir, $"created-276_{currentTimeSSS_FileExt}.txt");

            foreach (JObject record in csvJson)
            {
                var x12Data = x12Parser.ParseString(claimStatusBase);
                var interChanges = x12Data.Interchanges;
                x12Message = new X12Message();

                // FIX: build all formats once
                string isaDateYYMMDD = DateTime.Now.ToString("yyMMdd");   // ISA09 
                string dateYYYYMMDD = DateTime.Now.ToString("yyyyMMdd"); // GS04, BHT04, DTP/DMG
                string isaTimeHHmm = DateTime.Now.ToString("HHmm");     // ISA10 
                string timeHHmmss = DateTime.Now.ToString("HHmmss");   // GS05, BHT05 

                string isaControlNumber = GetControlNumber();
                string gsControlNumber = GetControlNumber();

                foreach (var interChange in interChanges)
                {
                    interchangeLoop = new InterchangeControlLoop();
                    isaSegment = interChange.ISA;
                    ieaSegment = interChange.IEA;

                    foreach (var group in interChange.Groups)
                    {
                        gsSegment = group.GS;
                        geSegment = group.GE;

                        foreach (var transactionset in group.TransactionSets)
                        {
                            var stSegment = transactionset.Segments.OfType<ST>().FirstOrDefault();
                            var bhtSegment = transactionset.Segments.OfType<BHT>().FirstOrDefault();

                            // --- Update ISA / GS / GE / IEA ---
                            // FIX: ISA date/time formats
                            isaSegment.InterchangeDate.ParsedValue = isaDateYYMMDD; 
                            isaSegment.InterchangeTime.ParsedValue = isaTimeHHmm;   
                            isaSegment.InterchangeControlNumber = isaControlNumber;
                            ieaSegment.InterchangeControlNumber = isaControlNumber;

                            // FIX: GS dates/times
                            gsSegment.CreateDate.ParsedValue = dateYYYYMMDD;  
                            gsSegment.CreateTime.ParsedValue = timeHHmmss;    
                            gsSegment.GroupControlNumber = int.Parse(gsControlNumber);
                            geSegment.GroupControlNumber = int.Parse(gsControlNumber);

                            // FIX: BHT date/time formats
                            if (bhtSegment != null)
                            {
                                var PAN = GetCSVValue(record, "PAN");
                                if( PAN != null && PAN.Length > 0)
                                {
                                    bhtSegment.OriginatorIdentifier = PAN;
                                   

                                }
                                else
                                {
                                    bhtSegment.OriginatorIdentifier = isaControlNumber;

                                }
                                    
                                bhtSegment.CreateDate.ParsedValue = dateYYYYMMDD; 
                                bhtSegment.CreateTime.ParsedValue = timeHHmmss;   
                            }

                            // --- PAYER LOOP (2000A/2100A) ---
                            var payerLoop = transactionset.Segments.OfType<Loop>().FirstOrDefault(l => l.SegmentId == "2000A");
                            var payerNameLoop = payerLoop?.Segments.OfType<Loop>().FirstOrDefault(l => l.SegmentId == "2100A");
                            var payerNM1 = payerNameLoop?.Segments.OfType<NM1>().FirstOrDefault();
                            if (payerNM1 != null)
                            {
                                payerNM1.Last = GetCSVValue(record, "PayerName");
                                payerNM1.IdQualifier = "PI";
                                payerNM1.IdCode = GetCSVValue(record, "PayerID"); 
                            }

                            // --- INFORMATION RECEIVER (2000B/2100B) ---
                            var infoRecvLoop = transactionset.Segments.OfType<Loop>().FirstOrDefault(l => l.SegmentId == "2000B");
                            var infoNameLoop = infoRecvLoop?.Segments.OfType<Loop>().FirstOrDefault(l => l.SegmentId == "2100B");
                            var infoNM1 = infoNameLoop?.Segments.OfType<NM1>().FirstOrDefault();
                            if (infoNM1 != null)
                            {
                                if (GetCSVValue(record, "ProviderLN") != null) { infoNM1.Last = GetCSVValue(record, "ProviderLN"); }
                                var providerFN = GetCSVValue(record, "ProviderFN");
                                if (providerFN != null)
                                {
                                    infoNM1.First = GetCSVValue(record, "ProviderFN");
                                }
                                else {
                                    infoNM1.EntityType = "2";
                                }                               
                                                                 
                                infoNM1.IdQualifier = "46"; 
                                infoNM1.IdCode = GetCSVValue(record, "ProviderID");
                            }
                            //(2000C / 2100C)
                            var loop2000c = transactionset.Segments.OfType<Loop>().FirstOrDefault(l => l.SegmentId == "2000C");
                            var loop2100c = loop2000c?.Segments.OfType<Loop>().FirstOrDefault(l => l.SegmentId == "2100C");
                            var NM12100c = loop2100c?.Segments.OfType<NM1>().FirstOrDefault();
                            if (NM12100c != null)
                            {
                                if (GetCSVValue(record, "ServiceProvider1LN") != null) { NM12100c.Last = GetCSVValue(record, "ServiceProvider1LN"); }
                                
                                if (GetCSVValue(record, "ServiceProvider1FN") != null) { NM12100c.First = GetCSVValue(record, "ServiceProvider1FN"); }
                                NM12100c.IdQualifier = "XX";
                                var provIDType = GetCSVValue(record, "ServiceProvider1IDType");
                                var provID = GetCSVValue(record, "ServiceProvider1ID");

                                if ( (provID != null) && (provIDType != null))
                                {
                                    if(provIDType == "T")
                                    {
                                        NM12100c.IdQualifier = "FI";

                                    }
                                    if (provIDType == "P")
                                    {
                                        NM12100c.IdQualifier = "SV";

                                    }
                                    NM12100c.IdCode = provID;
                                }


                            }


                            // --- SUBSCRIBER BRANCH under HL4 (2000D) ---
                            var subscriberLoop = transactionset.Segments.OfType<Loop>().FirstOrDefault(l => l.SegmentId == "2000D")
                                                 ?? transactionset.Segments.OfType<Loop>().FirstOrDefault(l => l.SegmentId == "2000C");
                            if (subscriberLoop != null)
                            {
                                var subscriberNM1loop = subscriberLoop?.Segments.OfType<Loop>().FirstOrDefault(l => l.SegmentId == "2100D");

                                // DMG (DOB/Gender) 
                                var dobYYYYMMDD = NormalizeToYYYYMMDD(GetCSVValue(record, "DOB"));
                                if (!string.IsNullOrEmpty(dobYYYYMMDD))
                                {
                                    var dmg = new DMG();
                                    dmg.DateOfBirth.FormatQualifier = "D8";
                                    dmg.DateOfBirth.ParsedValue = dobYYYYMMDD; 
                                    var gender = GetCSVValue(record, "Gender");
                                    if (!string.IsNullOrEmpty(gender)) dmg.GenderCode = gender;
                                    subscriberLoop.AddSegment(dmg);
                                }

                                // NM1 – Subscriber identity
                                //var subscriberNM1 = transactionset.Segments.OfType<Loop>().FirstOrDefault(l => l.SegmentId == "2000D");
                                var sNM1 = subscriberNM1loop.Segments.OfType<NM1>().FirstOrDefault();

                                if (sNM1 != null)
                                {

                                    sNM1.Last = GetCSVValue(record, "LN");
                                    sNM1.First = GetCSVValue(record, "FN");
                                    sNM1.IdQualifier = "MI";
                                    sNM1.IdCode = GetCSVValue(record, "MemberID");
                                }

                                //var loop2200D = subscriberNM1loop?.Segments.OfType<Loop>().FirstOrDefault(l => l.SegmentId == "2200D");

                                // TRN – must include trace number value
                                var trace = GetCSVValue(record, "PAN");
                                if (!string.IsNullOrEmpty(trace))
                                {
                                    var trn = new TRN();
                                    trn.TraceTypeCode = "1";
                                    trn.TraceNumber = trace;
                                    subscriberLoop.AddSegment(trn);
                                    
                                }

                                // AMT*T3
                                var amtVal = GetCSVValue(record, "TotalSubmittedCharges");
                                if (!string.IsNullOrEmpty(amtVal))
                                {
                                    var amt = new AMT();
                                    amt.AmountQualifierCode = "T3";        
                                    amt.MonetaryAmount.ParsedValue = amtVal;       
                                    subscriberLoop.AddSegment(amt);
                                }

                                // Claim Service Date DTP (RD8)
                                var from = NormalizeToYYYYMMDD(GetCSVValue(record, "ClaimDateFrom"));
                                var to = NormalizeToYYYYMMDD(GetCSVValue(record, "ClaimDateTo"));
                                if (!string.IsNullOrEmpty(from))
                                {
                                    var dtp = new DTP { Qualifier = "472" };
                                    if (!string.IsNullOrEmpty(to))
                                    {
                                        dtp.Date.FormatQualifier = "RD8";
                                        dtp.Date.ParsedValue = $"{from}-{to}";
                                    }
                                    else
                                    {
                                        dtp.Date.FormatQualifier = "D8";
                                        dtp.Date.ParsedValue = from;
                                    }
                                    subscriberLoop.AddSegment(dtp);
                                }

                                // SVC (service line) 
                                if (!string.IsNullOrEmpty(GetCSVValue(record, "ProcCodes")))
                                {
                                    var svc = new SVC
                                    {
                                        Procedure = new ProcedureIdentifier
                                        {
                                            Qualifier = GetCSVValue(record, "ProcCodeQualifier"),
                                            Code = GetCSVValue(record, "ProcCodes"),
                                        }
                                    };
                                    var lineAmt = GetCSVValue(record, "LineItemChargeAmount");
                                    if (!string.IsNullOrEmpty(lineAmt)) svc.ChargeAmount.ParsedValue = lineAmt;
                                    var units = GetCSVValue(record, "ProcUnits");
                                    if (!string.IsNullOrEmpty(units)) svc.UnitsOfServicePaidCount.ParsedValue = units;
                                    subscriberLoop.AddSegment(svc);
                                }

                                // REF*FJ
                                AddRefSegment(subscriberLoop, "FJ", GetCSVValue(record, "ServiceLineNumber"));

                                var procDate = NormalizeToYYYYMMDD(GetCSVValue(record, "ProcDates"));
                                if (!string.IsNullOrEmpty(procDate))
                                {
                                    var procDtp = new DTP { Qualifier = "472" };
                                    procDtp.Date.FormatQualifier = "D8";
                                    procDtp.Date.ParsedValue = procDate; 
                                    subscriberLoop.AddSegment(procDtp);
                                }

                                // Other REF 
                                AddRefSegment(subscriberLoop, "1K", GetCSVValue(record, "ClaimNumber"));
                                var ft = GetCSVValue(record, "FacilityType");
                                var cs = GetCSVValue(record, "ClaimStatus");
                                if (!string.IsNullOrEmpty(ft) && !string.IsNullOrEmpty(cs))
                                    AddRefSegment(subscriberLoop, "BLT", ft + cs);
                                AddRefSegment(subscriberLoop, "LU", ft);
                                AddRefSegment(subscriberLoop, "6P", GetCSVValue(record, "Group"));
                                AddRefSegment(subscriberLoop, "EJ", trace);
                            }

                            // --- WRITE FILE ---
                            string x12String =
                                isaSegment.ToString() +
                                gsSegment.ToString() +
                                transactionset.ToString() +
                                geSegment.ToString() +
                                ieaSegment.ToString() + "\r\n";

                            File.AppendAllText(outFile, x12String, Encoding.UTF8);
                        }
                    }
                }
            }

            timer.Stop();
            Console.WriteLine("276 X12 generation completed in " + timer.ElapsedMilliseconds + " ms");
            Console.WriteLine("Output File: " + outFile);
        }

        // ---------- HELPERS ----------
        private static void AddRefSegment(Loop loop, string qualifier, string value)
        {
            if (!string.IsNullOrEmpty(value))
            {
                REF refSeg = new REF { IdQualifier = qualifier, IdCode = value };
                loop.AddSegment(refSeg);
            }
        }

        //private static string GetCSVValue(JObject json, string field) => json[field]?.ToString() ?? "";

        private static string GetCSVValue(JObject jsonElement, string node)
        {
            string x12ElementValue = "";

            if (!string.IsNullOrEmpty(node))
            {
                try
                {
                    x12ElementValue = jsonElement[node]?.ToString() ?? string.Empty;
                }
                catch (KeyNotFoundException knfe)
                {
                    //log it
                }
            }
            return x12ElementValue;
        }

        private static string NormalizeToYYYYMMDD(string raw)
        {
            if (string.IsNullOrWhiteSpace(raw)) return "";
            var s = new string(raw.Where(char.IsDigit).ToArray()); 
            DateTime dt;

            var formats = new[] { "yyyyMMdd", "MMddyyyy", "Mddyyyy", "Mdyyyy", "M/d/yyyy", "MM/dd/yyyy", "M/d/yy", "MM/dd/yy", "yyyy-MM-dd" };
            foreach (var fmt in formats)
            {
                if (DateTime.TryParseExact(raw, fmt, null, System.Globalization.DateTimeStyles.None, out dt))
                    return dt.ToString("yyyyMMdd");
            }

            if (s.Length == 8)
            {
                if (DateTime.TryParseExact(s, "MMddyyyy", null, System.Globalization.DateTimeStyles.None, out dt))
                    return dt.ToString("yyyyMMdd");
                if (DateTime.TryParseExact(s, "yyyyMMdd", null, System.Globalization.DateTimeStyles.None, out dt))
                    return dt.ToString("yyyyMMdd");
            }

            // Last resort, let DateTime parse
            if (DateTime.TryParse(raw, out dt))
                return dt.ToString("yyyyMMdd");

            return "";
        }

        private static string ConvertDateRange(string from, string to)
        {
            var f = NormalizeToYYYYMMDD(from);
            var t = NormalizeToYYYYMMDD(to);
            if (!string.IsNullOrEmpty(f) && !string.IsNullOrEmpty(t)) return $"{f}-{t}";
            if (!string.IsNullOrEmpty(f)) return f;
            return "";
        }

        private static string GetControlNumber()
        {
            var rnd = new Random();
            return rnd.Next(100000000, 999999999).ToString();
        }

        public static string ParseCSVToJson(string filePath, string defaultHeader)
        {
            var lines = File.ReadAllLines(filePath);
            if (lines.Length == 0) return "[]";

            string[] headers;
            int startLine;

            if (lines[0].IndexOf("TxnType", StringComparison.OrdinalIgnoreCase) != -1)
            {
                headers = lines[0].Split(',');
                startLine = 1;
            }
            else
            {
                headers = defaultHeader.Split(',');
                startLine = 0;
            }

            var records = new List<Dictionary<string, string>>();
            for (int i = startLine; i < lines.Length; i++)
            {
                var values = lines[i].Split(',');
                var rec = new Dictionary<string, string>();
                for (int j = 0; j < headers.Length && j < values.Length; j++)
                    rec[headers[j]] = values[j];
                records.Add(rec);
            }
            return Newtonsoft.Json.JsonConvert.SerializeObject(records, Newtonsoft.Json.Formatting.Indented);
        }
    }
}
