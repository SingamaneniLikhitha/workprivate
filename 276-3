using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.Json;
using Domain.X12;
using Domain.X12.Fields;
using Domain.X12.Loops;
using Domain.X12.Parsers;
using Domain.X12.Segments;

namespace CSVRealtimeParser276
{
    class Claim276CSVParser
    {
        static async Task Main(string[] args)
        {
            X12Parser x12Parser = new X12Parser();
            X12Message x12Message;
            GS gsSegment;
            ISA isaSegment;
            IEA ieaSegment;
            GE geSegment;
            InterchangeControlLoop interchangeLoop;

            Stopwatch timer = new Stopwatch();
            timer.Start();

            // ---------- CONFIGURATION ----------
            string csv276File = "C:\\Users\\slikhith\\CsvToX12\\Portal_87726_test_csi.csv";
            string outputDir = "C:\\Users\\slikhith\\Documents\\creates-276";

            // Default CSV header for 276 mapping
            string defaultHeader =
                "TxnType,ClaimNumber,MemberID,LN,FN,ProviderID,ProviderLN,ProviderFN,ProviderAddress,ProviderCity,ProviderState,ProviderZip," +
                "PayerID,PayerName,ClaimDateFrom,ClaimDateTo,ClaimAmount,ServiceCode,TraceNumber";

            // ---------- BASE X12 TEMPLATE ----------
           string base276Template =
"ISA*00*          *00*          *ZZ*SENDERID       *ZZ*RECEIVERID     *250101*1200*^*00501*000000001*0*P*:~" +
"GS*HR*SENDERID*RECEIVERID*20250101*1200*1*X*005010X212~" +
"ST*276*0001*005010X212~" +
"BHT*0010*13*12345*20250101*1200~" +
"HL*1**20*1~" +
"NM1*PR*2*PAYER*****PI*PAYERID~" +
"HL*2*1*21*1~" +
"NM1*41*2*PROVIDER*****46*PROVIDID~" +
"HL*3*2*22*0~" +
"NM1*IL*1*LAST*FIRST****MI*MEMBER~" +
"DTP*472*RD8*20250101-20250115~" +
"SE*10*0001~" +
"GE*1*1~" +
"IEA*1*000000001~";


            // ---------- READ CSV ----------
            string jsonOutput = ParseCSVToJson(csv276File, defaultHeader);
            using JsonDocument csvJson = JsonDocument.Parse(jsonOutput);

            string currentTimeSSS_FileExt = DateTime.Now.ToString("HHmmssFFF");
            Directory.CreateDirectory(outputDir);
            string outFile = Path.Combine(outputDir, $"created-276_{currentTimeSSS_FileExt}.txt");

            if (csvJson.RootElement.ValueKind == JsonValueKind.Array)
            {
                foreach (JsonElement record in csvJson.RootElement.EnumerateArray())
                {
                    X12Data x12Data = null;
try
{
    x12Data = x12Parser.ParseString(base276Template);
}
catch (Exception ex)
{
    Console.WriteLine("‚ùå Exception while parsing X12 template:");
    Console.WriteLine(ex.Message);
    return; // stop execution early
}

                    var interChanges = x12Data.Interchanges;
                    x12Message = new X12Message();

                    string today_YYYYMMDD = DateTime.Now.ToString("yyyyMMdd");
                    string currentTime = DateTime.Now.ToString("HH:mm");
                    string currentTimeSSS = DateTime.Now.ToString("HHmm");
                    string isaControlNumber = GetControlNumber();
                    string gsControlNumber = GetControlNumber();

                    foreach (var interChange in interChanges)
                    {
                        interchangeLoop = new InterchangeControlLoop();
                        isaSegment = interChange.ISA;
                        ieaSegment = interChange.IEA;

                        foreach (var group in interChange.Groups)
                        {
                            gsSegment = group.GS;
                            geSegment = group.GE;

                            foreach (var transactionset in group.TransactionSets)
                            {
                                var stSegment = transactionset.Segments.OfType<ST>().FirstOrDefault();
                                var bhtSegment = transactionset.Segments.OfType<BHT>().FirstOrDefault();

                                // Update headers and control values
                                isaSegment.InterchangeDate.ParsedValue = today_YYYYMMDD;
                                isaSegment.InterchangeTime.ParsedValue = currentTime;
                                isaSegment.InterchangeControlNumber = isaControlNumber;
                                ieaSegment.InterchangeControlNumber = isaControlNumber;

                                gsSegment.CreateDate.ParsedValue = today_YYYYMMDD;
                                gsSegment.CreateTime.ParsedValue = currentTime;
                                gsSegment.GroupControlNumber = int.Parse(gsControlNumber);
                                geSegment.GroupControlNumber = int.Parse(gsControlNumber);

                                bhtSegment.OriginatorIdentifier = isaControlNumber;
                                bhtSegment.CreateDate.ParsedValue = today_YYYYMMDD;
                                bhtSegment.CreateTime.ParsedValue = currentTimeSSS;

                                // ---------- PAYER LOOP ----------
                                var payerLoop = transactionset.Segments.OfType<Loop>().FirstOrDefault(l => l.SegmentId == "2000A");
                                if (payerLoop != null)
                                {
                                    var payerNameLoop = payerLoop.Segments.OfType<Loop>().FirstOrDefault(l => l.SegmentId == "2100A");
                                    var payerNM1 = payerNameLoop?.Segments.OfType<NM1>().FirstOrDefault();
                                    if (payerNM1 != null)
                                    {
                                        payerNM1.Last = GetCSVValue(record, "PayerName");
                                        payerNM1.IdCode = GetCSVValue(record, "PayerID");
                                    }
                                }

                                // ---------- PROVIDER LOOP ----------
                                var providerLoop = transactionset.Segments.OfType<Loop>().FirstOrDefault(l => l.SegmentId == "2000B");
                                var providerNameLoop = providerLoop?.Segments.OfType<Loop>().FirstOrDefault(l => l.SegmentId == "2100B");
                                var providerNM1 = providerNameLoop?.Segments.OfType<NM1>().FirstOrDefault();
                                if (providerNM1 != null)
                                {
                                    providerNM1.Last = GetCSVValue(record, "ProviderLN");
                                    providerNM1.First = GetCSVValue(record, "ProviderFN");
                                    providerNM1.IdQualifier = "XX"; // NPI qualifier
                                    providerNM1.IdCode = GetCSVValue(record, "ProviderID");
                                }

                                // ---------- CLAIM/PATIENT LOOP ----------
                                var claimLoop = transactionset.Segments.OfType<Loop>().FirstOrDefault(l => l.SegmentId == "2000C");
                                if (claimLoop != null)
                                {
                                    var claimTRN = claimLoop.Segments.OfType<TRN>().FirstOrDefault();
                                    if (claimTRN != null)
                                    {
                                        claimTRN.TraceTypeCode = "1";
                                        claimTRN.TraceNumber = GetCSVValue(record, "TraceNumber");
                                    }

                                    // REF segment for Claim Number
                                    if (!string.IsNullOrEmpty(GetCSVValue(record, "ClaimNumber")))
                                    {
                                        claimLoop.AddSegment(new REF
                                        {
                                            IdQualifier = "1K",
                                            IdCode = GetCSVValue(record, "ClaimNumber")
                                        });
                                    }

                                    // DTP segment for Claim Service Dates
                                    if (!string.IsNullOrEmpty(GetCSVValue(record, "ClaimDateFrom")))
                                    {
                                        claimLoop.AddSegment(new DTP
                                        {
                                            Qualifier = "472", // Service Date qualifier
                                            Date =
                                            {
                                                FormatQualifier = "RD8",
                                                ParsedValue = ConvertDateRange(
                                                    GetCSVValue(record, "ClaimDateFrom"),
                                                    GetCSVValue(record, "ClaimDateTo"))
                                            }
                                        });
                                    }

                                    
                                }

                                // ---------- WRITE X12 OUTPUT ----------
                                // ---------- WRITE X12 OUTPUT ----------
string x12String = isaSegment.ToString() +
                   gsSegment.ToString() +
                   transactionset.ToString() +
                   geSegment.ToString() +
                   ieaSegment.ToString() + "\r\n";

try
{
    await File.AppendAllTextAsync(outFile, x12String, Encoding.UTF8);

    Console.WriteLine($"Attempted to write: {outFile}");

    if (File.Exists(outFile))
    {
        Console.WriteLine(" File exists and was written successfully.");
    }
    else
    {
        Console.WriteLine("File not found after write attempt!");
    }
}
catch (Exception ex)
{
    Console.WriteLine($"Error writing file: {ex.Message}");
}

                            }
                        }
                    }
                }
            }

            timer.Stop();
            Console.WriteLine(" 276 Claim Inquiry generation completed in " + timer.ElapsedMilliseconds + " ms");
            Console.WriteLine("Output File: " + outFile);
        }

        // ---------- HELPER FUNCTIONS ----------
        private static string GetControlNumber()
        {
            var random = new Random();
            return random.Next(100000000, 999999999).ToString();
        }

        private static string GetCSVValue(JsonElement jsonElement, string field)
        {
            try
            {
                return jsonElement.GetProperty(field).GetString() ?? "";
            }
            catch
            {
                return "";
            }
        }

        private static string ConvertDateRange(string fromDate, string toDate)
        {
            if (DateTime.TryParse(fromDate, out var fromDt) && DateTime.TryParse(toDate, out var toDt))
                return $"{fromDt:yyyyMMdd}-{toDt:yyyyMMdd}";
            return "";
        }

        private static string ParseCSVToJson(string filePath, string defaultHeader)
        {
            var lines = File.ReadAllLines(filePath);
            if (lines.Length == 0) return "[]";

            string[] headers;
            int startLine = 1;

            if (!lines[0].Contains("TxnType", StringComparison.OrdinalIgnoreCase))
            {
                headers = defaultHeader.Split(',');
                startLine = 0;
            }
            else headers = lines[0].Split(',');

            var records = new List<Dictionary<string, string>>();
            for (int i = startLine; i < lines.Length; i++)
            {
                var values = lines[i].Split(',');
                var rec = new Dictionary<string, string>();
                for (int j = 0; j < headers.Length && j < values.Length; j++)
                    rec[headers[j]] = values[j];
                records.Add(rec);
            }

            return JsonSerializer.Serialize(records, new JsonSerializerOptions { WriteIndented = true });
        }
    }
}
