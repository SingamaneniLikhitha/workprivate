using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Threading.Tasks;
using Domain.X12;
using Domain.X12.Fields;
using Domain.X12.Loops;
using Domain.X12.Parsers;
using Domain.X12.Segments;

namespace CSVRealtimeParser276
{
    class Claim276CSVParser
    {
        static async Task Main(string[] args)
        {
            X12Parser x12Parser = new X12Parser();
            X12Message x12Mess;
            GS gsSegment;
            ISA isaSegment;
            IEA ieaSegment;
            GE geSegment;
            InterchangeControlLoop interchangeLoop;

            // Define expected CSV headers for 276 claim inquiry
            string defaultHeader =
                "TxnType,ClaimNumber,MemberID,LN,FN,MI,DOB,ProviderID,ProviderLN,ProviderFN," +
                "ProviderAddress,ProviderCity,ProviderState,ProviderZip,PayerID,DateOfService," +
                "ClaimAmount,TraceNumber,Comments";

            Stopwatch timer = new Stopwatch();
            timer.Start();

            // --- Input / Output Files ---
            string csv276File = @"C:\Users\DELL\CsvToX12\276.csv";
            string currentTimeSSS_FileExt = DateTime.Now.ToString("HHmmssFFF");
            string outFile = @"C:\Users\DELL\CsvToX12\created-276_" + currentTimeSSS_FileExt + ".txt";

            // --- Hardcoded 276 Template with placeholders ---
            // Similar to your 270 “XXXXXX” placeholder design
            string claimDataTemplate =
                "ISA*00*          *00*          *ZZ*770545613      *ZZ*770545613      *990101*1200*^*00501*XXXXXXXXX*0*P*:~" +
                "GS*HR*770545613*XXXXXXXXX*20990101*1200*12345*X*005010X212~" +
                "ST*276*0001*005010X212~" +
                "BHT*0010*13*12345*20290101*1200~" +
                "HL*1**20*1~" +
                "NM1*PR*2*XXXXX*****PI*XXXXX~" +        // Payer
                "HL*2*1*21*1~" +
                "NM1*1P*2*XXXXX*****XX*XXXXXXX~" +      // Provider
                "HL*3*2*22*0~" +
                "TRN*1*XXXXXX*CLAIMTRACK~" +            // Trace/Claim Number
                "NM1*QC*1*XXXXX*XXXXXX****MI*XXXXXXXX~" + // Patient
                "DTP*472*RD8*20250101-20250115~" +     // Date of Service
                "SE*16*0001~" +
                "GE*1*12345~" +
                "IEA*1*XXXXXXXXX~";

            // --- Parse CSV ---
            string jsonOutput = ParseCSVToJson(csv276File, defaultHeader);
            using JsonDocument csvJson = JsonDocument.Parse(jsonOutput);

            if (csvJson.RootElement.ValueKind == JsonValueKind.Array)
            {
                foreach (JsonElement record in csvJson.RootElement.EnumerateArray())
                {
                    var x12Data = x12Parser.ParseString(claimDataTemplate);
                    var interChanges = x12Data.Interchanges;
                    x12Mess = new X12Message();

                    string today_YYYYMMDD = DateTime.Now.ToString("yyyyMMdd");
                    string today_MMDDYYYY = DateTime.Now.ToString("MMddyyyy");
                    string currentTime = DateTime.Now.ToString("HH:mm");
                    string currentTimeSSS = DateTime.Now.ToString("HHmm");
                    string isaControlNumber = GetControlNumber();
                    string gsControlNumber = GetControlNumber();

                    foreach (var interChange in interChanges)
                    {
                        interchangeLoop = new InterchangeControlLoop();
                        isaSegment = interChange.ISA;
                        ieaSegment = interChange.IEA;

                        foreach (var group in interChange.Groups)
                        {
                            gsSegment = group.GS;
                            geSegment = group.GE;

                            foreach (var transactionset in group.TransactionSets)
                            {
                                var stSegment = transactionset.Segments.OfType<ST>().FirstOrDefault();
                                var bhtSegment = transactionset.Segments.OfType<BHT>().FirstOrDefault();

                                // --- ISA ---
                                isaSegment.InterchangeDate.ParsedValue = today_YYYYMMDD;
                                isaSegment.InterchangeTime.ParsedValue = currentTime;
                                isaSegment.InterchangeControlNumber = isaControlNumber;

                                // --- IEA ---
                                ieaSegment.InterchangeControlNumber = isaControlNumber;

                                // --- GS ---
                                gsSegment.CreateDate.ParsedValue = today_YYYYMMDD;
                                gsSegment.CreateTime.ParsedValue = currentTime;
                                gsSegment.GroupControlNumber = int.Parse(gsControlNumber);

                                // --- GE ---
                                geSegment.GroupControlNumber = int.Parse(gsControlNumber);

                                // --- BHT ---
                                bhtSegment.OriginatorIdentifier = isaControlNumber;
                                bhtSegment.CreateDate.ParsedValue = today_YYYYMMDD;
                                bhtSegment.CreateTime.ParsedValue = currentTimeSSS;

                                // --- Payer Loop (2000A / 2100A) ---
                                var payerLoop = transactionset.Segments.OfType<Loop>().FirstOrDefault(l => l.SegmentId == "2000A");
                                var payerNameLoop = payerLoop?.Segments.OfType<Loop>().FirstOrDefault(l => l.SegmentId == "2100A");
                                var payerNM1 = payerNameLoop?.Segments.OfType<NM1>().FirstOrDefault();
                                if (payerNM1 != null)
                                {
                                    payerNM1.Last = GetCSVValue(record, "PayerID");
                                    payerNM1.IdCode = GetCSVValue(record, "PayerID");
                                }

                                // --- Provider Loop (2000B / 2100B) ---
                                var providerLoop = transactionset.Segments.OfType<Loop>().FirstOrDefault(l => l.SegmentId == "2000B");
                                var providerNameLoop = providerLoop?.Segments.OfType<Loop>().FirstOrDefault(l => l.SegmentId == "2100B");
                                var providerNM1 = providerNameLoop?.Segments.OfType<NM1>().FirstOrDefault();
                                if (providerNM1 != null)
                                {
                                    providerNM1.Last = GetCSVValue(record, "ProviderLN");
                                    providerNM1.First = GetCSVValue(record, "ProviderFN");
                                    providerNM1.IdQualifier = "XX";
                                    providerNM1.IdCode = GetCSVValue(record, "ProviderID");
                                }

                                // --- Patient Loop (2000C / 2100C) ---
                                var patientLoop = transactionset.Segments.OfType<Loop>().FirstOrDefault(l => l.SegmentId == "2000C");
                                var patientNameLoop = patientLoop?.Segments.OfType<Loop>().FirstOrDefault(l => l.SegmentId == "2100C");
                                var patientNM1 = patientNameLoop?.Segments.OfType<NM1>().FirstOrDefault();
                                if (patientNM1 != null)
                                {
                                    patientNM1.First = GetCSVValue(record, "FN");
                                    patientNM1.Last = GetCSVValue(record, "LN");
                                    patientNM1.IdQualifier = "MI";
                                    patientNM1.IdCode = GetCSVValue(record, "MemberID");
                                }

                                // --- TRN Segment ---
                                var trnSegment = transactionset.Segments.OfType<TRN>().FirstOrDefault();
                                if (trnSegment != null)
                                {
                                    trnSegment.TraceTypeCode = "1";
                                    trnSegment.TraceNumber = GetCSVValue(record, "ClaimNumber");
                                }

                                // --- DTP Segment (Service Dates) ---
                                var dtpSegment = transactionset.Segments.OfType<DTP>().FirstOrDefault();
                                if (dtpSegment != null)
                                {
                                    dtpSegment.Qualifier = "472";
                                    dtpSegment.Date.FormatQualifier = "RD8";
                                    dtpSegment.Date.ParsedValue =
                                        ConvertDateRange(
                                            GetCSVValue(record, "DateOfService"),
                                            GetCSVValue(record, "DateOfService"));
                                }

                                // --- Add Claim Amount if available ---
                                if (!string.IsNullOrEmpty(GetCSVValue(record, "ClaimAmount")))
                                {
                                    var amt = new AMT();
                                    amt.SetElement(1, "T3");
                                    amt.SetElement(2, GetCSVValue(record, "ClaimAmount"));
                                    transactionset.AddSegment(amt);
                                }

                                // --- Add Comments if available ---
                                if (!string.IsNullOrEmpty(GetCSVValue(record, "Comments")))
                                {
                                    var nte = new NTE();
                                    nte.NoteReference = "ADD";
                                    nte.Note = GetCSVValue(record, "Comments");
                                    transactionset.AddSegment(nte);
                                }

                                // --- Build final X12 string ---
                                string x12String = isaSegment.ToString() +
                                                   gsSegment.ToString() +
                                                   transactionset.ToString() +
                                                   geSegment.ToString() +
                                                   ieaSegment.ToString() + "\r\n";

                                await File.AppendAllTextAsync(outFile, x12String, Encoding.UTF8);
                            }
                        }
                    }
                }
            }

            timer.Stop();
            Console.WriteLine("✅ 276 Claim Status X12 created in " + timer.ElapsedMilliseconds + " ms");
            Console.WriteLine("Output: " + outFile);
        }

        // --- Helper Functions ---
        private static string GetControlNumber()
        {
            var random = new Random();
            return random.Next(100000000, 999999999).ToString();
        }

        private static string GetCSVValue(JsonElement jsonElement, string field)
        {
            try { return jsonElement.GetProperty(field).GetString() ?? ""; }
            catch { return ""; }
        }

        private static string ConvertDateRange(string fromDate, string toDate)
        {
            if (DateTime.TryParse(fromDate, out var fromDt) && DateTime.TryParse(toDate, out var toDt))
                return $"{fromDt:yyyyMMdd}-{toDt:yyyyMMdd}";
            return "";
        }

        private static string ParseCSVToJson(string filePath, string defaultHeader)
        {
            var lines = File.ReadAllLines(filePath);
            if (lines.Length == 0) return "[]";

            string[] headers;
            int startLine = 1;

            if (!lines[0].Contains("TxnType", StringComparison.OrdinalIgnoreCase))
            {
                headers = defaultHeader.Split(',');
                startLine = 0;
            }
            else headers = lines[0].Split(',');

            var records = new List<Dictionary<string, string>>();
            for (int i = startLine; i < lines.Length; i++)
            {
                var values = lines[i].Split(',');
                var rec = new Dictionary<string, string>();
                for (int j = 0; j < headers.Length && j < values.Length; j++)
                    rec[headers[j]] = values[j];
                records.Add(rec);
            }
            return JsonSerializer.Serialize(records, new JsonSerializerOptions { WriteIndented = true });
        }
    }
}
