using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Threading.Tasks;
using Domain.X12;
using Domain.X12.Fields;
using Domain.X12.Loops;
using Domain.X12.Parsers;
using Domain.X12.Segments;

namespace CSVRealtimeParser276
{
    class Claim276CSVParser
    {
        static async Task Main(string[] args)
        {
            X12Parser x12Parser = new X12Parser();
            X12Message x12Message;
            GS gsSegment;
            ISA isaSegment;
            IEA ieaSegment;
            GE geSegment;
            InterchangeControlLoop interchangeLoop;

            Stopwatch timer = new Stopwatch();
            timer.Start();

            // ---------- CONFIGURATION ----------
            string csv276File = "C:\\Users\\slikhith\\CsvToX12\\Portal_87726_test_csi.csv";
            string outputDir = "C:\\Users\\slikhith\\Documents\\creates-276.";

            Directory.CreateDirectory(outputDir);

            string defaultHeader =
                "TxnType,ClaimNumber,MemberID,LN,FN,DOB,ProviderID,ProviderLN,ProviderFN,PayerID,PayerName,ClaimDateFrom,ClaimDateTo,TraceNumber";

            // ---------- 276 BASE TEMPLATE ----------
            // This acts like your 270 hardcoded string — a skeleton with placeholders
            string claimStatusBase =
                "ISA*00*          *00*          *ZZ*770545613      *ZZ*770545613      *990101*1200*^*00501*123456789*0*P*:~" +
                "GS*HR*770545613*XXXXXXXXX*20990101*1200*12345*X*005010X212~" +
                "ST*276*0001*005010X212~" +
                "BHT*0010*13*12345*20290101*1200~" +
                "HL*1**20*1~" +
                "NM1*PR*2*XXXXX*****PI*XXXXX~" +          // Payer
                "HL*2*1*21*1~" +
                "NM1*41*2*XXXXX*****46*XXXXXXX~" +        // Provider
                "HL*3*2*19*1~" +
                "NM1*1P*2******XX*XXXXXXXXX~" +           // Service Provider
                "HL*4*3*22*0~" +
                "DMG*D8*19621105~" +
                "NM1*IL*1*XXXXX*XXXXXX****MI*XXXXXXXX~" +
                "TRN*1*XXXXXX*CLAIMTRACE~" +
                "DTP*472*RD8*20250101-20250115~" +
                "SE*14*0001~" +
                "GE*1*12345~" +
                "IEA*1*123456789~";

            // ---------- READ CSV ----------
            string jsonOutput = ParseCSVToJson(csv276File, defaultHeader);
            using JsonDocument csvJson = JsonDocument.Parse(jsonOutput);

            string currentTimeSSS_FileExt = DateTime.Now.ToString("HHmmssFFF");
            string outFile = Path.Combine(outputDir, $"created-276_{currentTimeSSS_FileExt}.txt");

            if (csvJson.RootElement.ValueKind == JsonValueKind.Array)
            {
                foreach (JsonElement record in csvJson.RootElement.EnumerateArray())
                {
                    var x12Data = x12Parser.ParseString(claimStatusBase);
                    var interChanges = x12Data.Interchanges;
                    x12Message = new X12Message();

                    string today_YYYYMMDD = DateTime.Now.ToString("yyyyMMdd");
                    string currentTime = DateTime.Now.ToString("HH:mm");
                    string currentTimeSSS = DateTime.Now.ToString("HHmm");
                    string isaControlNumber = GetControlNumber();
                    string gsControlNumber = GetControlNumber();

                    foreach (var interChange in interChanges)
                    {
                        interchangeLoop = new InterchangeControlLoop();
                        isaSegment = interChange.ISA;
                        ieaSegment = interChange.IEA;

                        foreach (var group in interChange.Groups)
                        {
                            gsSegment = group.GS;
                            geSegment = group.GE;

                            foreach (var transactionset in group.TransactionSets)
                            {
                                var stSegment = transactionset.Segments.OfType<ST>().FirstOrDefault();
                                var bhtSegment = transactionset.Segments.OfType<BHT>().FirstOrDefault();

                                // --- Update ISA / GS / GE / IEA ---
                                isaSegment.InterchangeDate.ParsedValue = today_YYYYMMDD;
                                isaSegment.InterchangeTime.ParsedValue = currentTime;
                                isaSegment.InterchangeControlNumber = isaControlNumber;
                                ieaSegment.InterchangeControlNumber = isaControlNumber;

                                gsSegment.CreateDate.ParsedValue = today_YYYYMMDD;
                                gsSegment.CreateTime.ParsedValue = currentTime;
                                gsSegment.GroupControlNumber = int.Parse(gsControlNumber);
                                geSegment.GroupControlNumber = int.Parse(gsControlNumber);

                                bhtSegment.OriginatorIdentifier = isaControlNumber;
                                bhtSegment.CreateDate.ParsedValue = today_YYYYMMDD;
                                bhtSegment.CreateTime.ParsedValue = currentTimeSSS;

                                // --- PAYER LOOP (2000A/2100A) ---
                                var payerLoop = transactionset.Segments.OfType<Loop>().FirstOrDefault(l => l.SegmentId == "2000A");
                                var payerNameLoop = payerLoop?.Segments.OfType<Loop>().FirstOrDefault(l => l.SegmentId == "2100A");
                                var payerNM1 = payerNameLoop?.Segments.OfType<NM1>().FirstOrDefault();
                                if (payerNM1 != null)
                                {
                                    payerNM1.Last = GetCSVValue(record, "PayerName");
                                    payerNM1.IdQualifier = "PI";
                                    payerNM1.IdCode = GetCSVValue(record, "PayerID");
                                }

                                // --- PROVIDER LOOP (2000B/2100B) ---
                                var providerLoop = transactionset.Segments.OfType<Loop>().FirstOrDefault(l => l.SegmentId == "2000B");
                                var providerNameLoop = providerLoop?.Segments.OfType<Loop>().FirstOrDefault(l => l.SegmentId == "2100B");
                                var providerNM1 = providerNameLoop?.Segments.OfType<NM1>().FirstOrDefault();
                                if (providerNM1 != null)
                                {
                                    providerNM1.Last = GetCSVValue(record, "ProviderLN");
                                    providerNM1.First = GetCSVValue(record, "ProviderFN");
                                    providerNM1.IdQualifier = "XX";
                                    providerNM1.IdCode = GetCSVValue(record, "ProviderID");
                                }

                                // --- CLAIM/PATIENT LOOP (2000C) ---
                                var claimLoop = transactionset.Segments.OfType<Loop>().FirstOrDefault(l => l.SegmentId == "2000C");
                                if (claimLoop != null)
                                {
                                    //  DMG
                                    if (!string.IsNullOrEmpty(GetCSVValue(record, "DOB")))
                                    {
                                        DMG dmg = new DMG();
                                        dmg.DateOfBirth.FormatQualifier = "D8";
                                        dmg.DateOfBirth.ParsedValue = ConvertMMDDYYYYtoYYYYMMDD(GetCSVValue(record, "DOB"));
                                        claimLoop.AddSegment(dmg);
                                    }

                                    // NM1 – patient/insured
                                    claimLoop.AddSegment(new NM1
                                    {
                                        Last = GetCSVValue(record, "LN"),
                                        First = GetCSVValue(record, "FN"),
                                        IdQualifier = "MI",
                                        IdCode = GetCSVValue(record, "MemberID")
                                    });

                                    // TRN
                                    claimLoop.AddSegment(new TRN
                                    {
                                        TraceTypeCode = "1",
                                        TraceNumber = GetCSVValue(record, "TraceNumber"),
                                       
                                    });

                                    // DTP (Service date)
                                    if (!string.IsNullOrEmpty(GetCSVValue(record, "ClaimDateFrom")))
                                    {
                                        DTP dtp = new DTP();
                                        dtp.Qualifier = "472";
                                        dtp.Date.FormatQualifier = "RD8";
                                        dtp.Date.ParsedValue = ConvertDateRange(
                                            GetCSVValue(record, "ClaimDateFrom"),
                                            GetCSVValue(record, "ClaimDateTo"));
                                        claimLoop.AddSegment(dtp);
                                    }
                                }

                                // --- WRITE FILE ---
                                string x12String =
                                    isaSegment.ToString() +
                                    gsSegment.ToString() +
                                    transactionset.ToString() +
                                    geSegment.ToString() +
                                    ieaSegment.ToString() + "\r\n";

                                await File.AppendAllTextAsync(outFile, x12String, Encoding.UTF8);
                            }
                        }
                    }
                }
            }

            timer.Stop();
            Console.WriteLine("276 X12 generation completed in " + timer.ElapsedMilliseconds + " ms");
            Console.WriteLine("Output File: " + outFile);
        }

        // ---------- HELPERS ----------
        private static string GetCSVValue(JsonElement json, string field)
        {
            try { return json.GetProperty(field).GetString() ?? ""; }
            catch { return ""; }
        }

        private static string ConvertMMDDYYYYtoYYYYMMDD(string mmddyyyy)
        {
            if (DateTime.TryParseExact(mmddyyyy, "MMddyyyy", null,
                System.Globalization.DateTimeStyles.None, out var dt))
                return dt.ToString("yyyyMMdd");
            return mmddyyyy;
        }

        private static string ConvertDateRange(string from, string to)
        {
            if (DateTime.TryParse(from, out var f) && DateTime.TryParse(to, out var t))
                return $"{f:yyyyMMdd}-{t:yyyyMMdd}";
            return "";
        }

        private static string GetControlNumber()
        {
            var rnd = new Random();
            return rnd.Next(100000000, 999999999).ToString();
        }

        private static string ParseCSVToJson(string filePath, string defaultHeader)
        {
            var lines = File.ReadAllLines(filePath);
            if (lines.Length == 0) return "[]";

            string[] headers;
            int startLine = 1;

            if (!lines[0].Contains("TxnType", StringComparison.OrdinalIgnoreCase))
            {
                headers = defaultHeader.Split(',');
                startLine = 0;
            }
            else headers = lines[0].Split(',');

            var records = new List<Dictionary<string, string>>();
            for (int i = startLine; i < lines.Length; i++)
            {
                var values = lines[i].Split(',');
                var rec = new Dictionary<string, string>();
                for (int j = 0; j < headers.Length && j < values.Length; j++)
                    rec[headers[j]] = values[j];
                records.Add(rec);
            }
            return JsonSerializer.Serialize(records, new JsonSerializerOptions { WriteIndented = true });
        }
    }
}
