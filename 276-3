using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.Json;
using Domain.X12;
using Domain.X12.Fields;
using Domain.X12.Loops;
using Domain.X12.Parsers;
using Domain.X12.Segments;

namespace CSVRealtimeParser276
{
    class Claim276CSVParser
    {
        static async Task Main(string[] args)
        {
            X12Parser x12Parser = new X12Parser();
            X12Message x12Message;
            GS gsSegment;
            ISA isaSegment;
            IEA ieaSegment;
            GE geSegment;
            InterchangeControlLoop interchangeLoop;

            Stopwatch timer = new Stopwatch();
            timer.Start();

            // ---------- CONFIGURATION ----------
            string csv276File = "C:\\Users\\slikhith\\CsvToX12\\Portal_87726_test_csi.csv";
            string outputDir = "C:\\Users\\slikhith\\Documents\\";
            string currentTimeSSS_FileExt = DateTime.Now.ToString("HHmmssFFF");
            string outFile = Path.Combine(outputDir, $"created-276_{currentTimeSSS_FileExt}.txt");

            // Default CSV header for 276 mapping
            string defaultHeader =
                "TxnType,ClaimNumber,MemberID,LN,FN,ProviderID,ProviderLN,ProviderFN," +
                "PayerID,PayerName,ClaimDateFrom,ClaimDateTo,TraceNumber";

            // ---------- BASE 276 TEMPLATE ----------
            string base276Template =
                "ISA*00*          *00*          *ZZ*SENDERID       *ZZ*RECEIVERID     *250101*1200*^*00501*000000001*0*P*:~" +
                "GS*HR*SENDERID*RECEIVERID*20250101*1200*1*X*005010X212~" +
                "ST*276*0001*005010X212~" +
                "BHT*0010*13*12345*20250101*1200~" +
                "HL*1**20*1~" +
                "NM1*PR*2*PAYER*****PI*PAYERID~" +
                "HL*2*1*21*1~" +
                "NM1*41*2*PROVIDER*****46*PROVIDERID~" +
                "HL*3*2*19*1~" +
                "NM1*1P*2*BILLINGPROVIDER*****XX*NPI1234567893~" +
                "HL*4*3*22*0~" +
                "NM1*IL*1*DOE*JOHN****MI*MEMBER123~" +
                "TRN*1*TRACE123*9CHGHEALTH~" +
                "REF*1K*CLM00001234~" +
                "DTP*472*RD8*20250101-20250115~" +
                "SE*14*0001~" +
                "GE*1*1~" +
                "IEA*1*000000001~";

            // ---------- READ CSV ----------
            string jsonOutput = ParseCSVToJson(csv276File, defaultHeader);
            using JsonDocument csvJson = JsonDocument.Parse(jsonOutput);

            if (csvJson.RootElement.ValueKind != JsonValueKind.Array)
            {
                Console.WriteLine("‚ùå CSV file empty or invalid format.");
                return;
            }

            Console.WriteLine("‚è≥ Processing records...");

            foreach (JsonElement record in csvJson.RootElement.EnumerateArray())
            {
                try
                {
                    // Parse base 276 into structured X12 object
                    var x12Data = x12Parser.ParseString(base276Template);
                    var interChanges = x12Data.Interchanges;
                    x12Message = new X12Message();

                    string today_YYYYMMDD = DateTime.Now.ToString("yyyyMMdd");
                    string currentTime = DateTime.Now.ToString("HH:mm");
                    string currentTimeSSS = DateTime.Now.ToString("HHmm");
                    string isaControlNumber = GetControlNumber();
                    string gsControlNumber = GetControlNumber();

                    foreach (var interChange in interChanges)
                    {
                        interchangeLoop = new InterchangeControlLoop();
                        isaSegment = interChange.ISA;
                        ieaSegment = interChange.IEA;

                        foreach (var group in interChange.Groups)
                        {
                            gsSegment = group.GS;
                            geSegment = group.GE;

                            foreach (var transactionset in group.TransactionSets)
                            {
                                var bhtSegment = transactionset.Segments.OfType<BHT>().FirstOrDefault();

                                // Header & control updates
                                isaSegment.InterchangeDate.ParsedValue = today_YYYYMMDD;
                                isaSegment.InterchangeTime.ParsedValue = currentTime;
                                isaSegment.InterchangeControlNumber = isaControlNumber;
                                ieaSegment.InterchangeControlNumber = isaControlNumber;
                                gsSegment.CreateDate.ParsedValue = today_YYYYMMDD;
                                gsSegment.CreateTime.ParsedValue = currentTime;
                                gsSegment.GroupControlNumber = int.Parse(gsControlNumber);
                                geSegment.GroupControlNumber = int.Parse(gsControlNumber);
                                bhtSegment.OriginatorIdentifier = isaControlNumber;
                                bhtSegment.CreateDate.ParsedValue = today_YYYYMMDD;
                                bhtSegment.CreateTime.ParsedValue = currentTimeSSS;

                                // PAYER LOOP (2000A)
                                var payerNM1 = transactionset.Segments.OfType<NM1>().FirstOrDefault(s => s.EntityIdentifierCode == "PR");
                                if (payerNM1 != null)
                                {
                                    payerNM1.Last = GetCSVValue(record, "PayerName");
                                    payerNM1.IdCode = GetCSVValue(record, "PayerID");
                                }

                                // PROVIDER LOOP (2000B)
                                var providerNM1 = transactionset.Segments.OfType<NM1>().FirstOrDefault(s => s.EntityIdentifierCode == "41");
                                if (providerNM1 != null)
                                {
                                    providerNM1.Last = GetCSVValue(record, "ProviderLN");
                                    providerNM1.First = GetCSVValue(record, "ProviderFN");
                                    providerNM1.IdQualifier = "XX";
                                    providerNM1.IdCode = GetCSVValue(record, "ProviderID");
                                }

                                // PATIENT / CLAIM LOOP (2000D)
                                var patientNM1 = transactionset.Segments.OfType<NM1>().FirstOrDefault(s => s.EntityIdentifierCode == "IL");
                                if (patientNM1 != null)
                                {
                                    patientNM1.Last = GetCSVValue(record, "LN");
                                    patientNM1.First = GetCSVValue(record, "FN");
                                    patientNM1.IdQualifier = "MI";
                                    patientNM1.IdCode = GetCSVValue(record, "MemberID");
                                }

                                // TRN Segment
                                var trn = transactionset.Segments.OfType<TRN>().FirstOrDefault();
                                if (trn != null)
                                {
                                    trn.TraceTypeCode = "1";
                                    trn.TraceNumber = GetCSVValue(record, "TraceNumber");
                                }

                                // REF Segment - Claim Number
                                transactionset.AddSegment(new REF
                                {
                                    IdQualifier = "1K",
                                    IdCode = GetCSVValue(record, "ClaimNumber")
                                });

                                // DTP Segment - Claim Dates
                                if (!string.IsNullOrEmpty(GetCSVValue(record, "ClaimDateFrom")))
                                {
                                    transactionset.AddSegment(new DTP
                                    {
                                        Qualifier = "472",
                                        Date =
                                        {
                                            FormatQualifier = "RD8",
                                            ParsedValue = ConvertDateRange(
                                                GetCSVValue(record, "ClaimDateFrom"),
                                                GetCSVValue(record, "ClaimDateTo"))
                                        }
                                    });
                                }

                                // ---------- WRITE OUTPUT ----------
                                string x12String =
                                    isaSegment.ToString() +
                                    gsSegment.ToString() +
                                    transactionset.ToString() +
                                    geSegment.ToString() +
                                    ieaSegment.ToString() + "\r\n";

                                await File.AppendAllTextAsync(outFile, x12String, Encoding.UTF8);
                                Console.WriteLine($"‚úÖ Record appended for Claim {GetCSVValue(record, "ClaimNumber")}");
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine("‚ùå Parsing failed for record.");
                    Console.WriteLine($"Message: {ex.Message}");
                    if (ex.InnerException != null)
                        Console.WriteLine($"Inner: {ex.InnerException.Message}");
                }
            }

            timer.Stop();
            Console.WriteLine($"\n‚úÖ 276 Claim Inquiry generation completed in {timer.ElapsedMilliseconds} ms");
            Console.WriteLine($"üìÅ Output File: {outFile}");
            Console.WriteLine(File.Exists(outFile)
                ? "‚úÖ File written successfully!"
                : "‚ùå File not found after execution.");
        }

        // ---------- HELPERS ----------
        private static string GetControlNumber()
        {
            var random = new Random();
            return random.Next(100000000, 999999999).ToString();
        }

        private static string GetCSVValue(JsonElement jsonElement, string field)
        {
            try
            {
                return jsonElement.GetProperty(field).GetString() ?? "";
            }
            catch
            {
                return "";
            }
        }

        private static string ConvertDateRange(string fromDate, string toDate)
        {
            if (DateTime.TryParse(fromDate, out var fromDt) && DateTime.TryParse(toDate, out var toDt))
                return $"{fromDt:yyyyMMdd}-{toDt:yyyyMMdd}";
            return "";
        }

        private static string ParseCSVToJson(string filePath, string defaultHeader)
        {
            var lines = File.ReadAllLines(filePath);
            if (lines.Length == 0) return "[]";

            string[] headers;
            int startLine = 1;

            if (!lines[0].Contains("TxnType", StringComparison.OrdinalIgnoreCase))
            {
                headers = defaultHeader.Split(',');
                startLine = 0;
            }
            else headers = lines[0].Split(',');

            var records = new List<Dictionary<string, string>>();
            for (int i = startLine; i < lines.Length; i++)
            {
                var values = lines[i].Split(',');
                var rec = new Dictionary<string, string>();
                for (int j = 0; j < headers.Length && j < values.Length; j++)
                    rec[headers[j]] = values[j];
                records.Add(rec);
            }

            return JsonSerializer.Serialize(records, new JsonSerializerOptions { WriteIndented = true });
        }
    }
}
